// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should error if 0 or less dimensions are given (createArrayFromDimensions) [RangeError] [E018] 1`] = `"\\"dim\\" needs to be higher than 0 (.) [E018]"`;

exports[`should error if 0 or less dimensions are given (createArrayFromDimensions) [RangeError] [E018] 2`] = `"\\"dim\\" needs to be higher than 0 (.) [E018]"`;

exports[`should error if a non-valid object is passed to "getClass" [ResolveTypegooseNameError] [E014] 1`] = `
"Input was not a string AND didn't have a .typegooseName function AND didn't have a .typegooseName string [E014]
Value: \\"undefined\\""
`;

exports[`should error if not all needed parameters for virtual-populate are given [NotAllVPOPElementsError] [E006] 1`] = `"\\"TestNAEEVirtualPopulate.test\\" has not all needed Virtual Populate Options! Needed are: localField, foreignField, ref [E006]"`;

exports[`should error if the Type does not have a valid "OptionsConstructor" [InvalidOptionsConstructorError] [E016] 1`] = `
"Type has a invalid \\"OptionsConstructor\\" on \\"Error.undefined-pkey\\"! [E016]
Type: \\"class CustomType {
        constructor() { }
    }\\""
`;

exports[`should fail when using Number-Enum on an String Type [NotStringTypeError] [E010] 1`] = `
"Typeof \\"NumberEnumOnStringType.someEnum\\" is \\"String\\", used enum is not only Strings! [E010]
  Encountered with property in Enum: \\"One.string\\""
`;

exports[`should fail when using String-Enum on an Number Type [NotNumberTypeError] [E011] 1`] = `
"Typeof \\"NumberEnumOnStringType.someEnum\\" is \\"Number\\", value is undefined/null or does not have a reverse mapping! [E011]
  Encountered with property: \\"One.string\\""
`;

exports[`should throw a Error in "processProp" when using a invalid type for enums [InvalidEnumTypeError] [E012] 1`] = `
"Invalid Type used for options \\"enum\\" at \\"TestInvalidEnumType.testVal\\"! [E012]
Type: \\"function SchemaBoolean(path, options) {
  SchemaType.call(this, path, options, 'Boolean');
}\\"
https://typegoose.github.io/typegoose/docs/guides/error-warning-details#invalid-type-for-enum-e012"
`;

exports[`should throw a Error when "discriminators" is with "dim" other than "1" [OptionDoesNotSupportOption] [E027] 1`] = `"The Option \\"discriminators\\" does not support Option \\"dim\\" other than \\"1\\" (provided was: \\"dim: 2\\") [E027]"`;

exports[`should throw a Error when "mapValueToSeverity" gets called but is not in "Severity" [Error] 1`] = `"\\"value\\" is not in range of \\"Severity\\"! (got: -1)"`;

exports[`should throw a Error when "ref" is a array [OptionDoesNotSupportOption] [E027] 1`] = `"The Option \\"ref\\" does not support Option \\"dim\\" other than \\"0\\" (provided was: \\"dim: 1\\") [E027]"`;

exports[`should throw a Error when the property is a Symbol [CannotBeSymbolError] [E024] 1`] = `"A property key in Typegoose cannot be an symbol! (\\"TestPropertySymbol.Symbol()\\") [E024]"`;

exports[`should throw an error if a self-contained class is used [typegoose#42] [SelfContainingClassError] [E004] 1`] = `
"It seems like the type used is the same as the target class, which is not supported
Please look at https://github.com/typegoose/typegoose/issues/42 for more information (\\"TestSelfContained.self\\") [E004]"
`;

exports[`should throw default error if no error is specified (assertion) [AssertionFallbackError] [E019] 1`] = `"Assert failed - no custom error [E019]"`;

exports[`tests for "ExpectedTypeError" [E029] should error if no function for hooks is defined [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"fn\\" to have type \\"function\\", got: \\"undefined\\" [E029]"`;

exports[`tests for "ExpectedTypeError" [E029] should error if no valid key is supplied to "getModelWithString" [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"key\\" to have type \\"string\\", got: \\"true\\" [E029]"`;

exports[`tests for "ExpectedTypeError" [E029] should error if the options provided to "setGlobalOptions" are not an object [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"options\\" to have type \\"object\\", got: \\"undefined\\" [E029]"`;

exports[`tests for "ExpectedTypeError" [E029] should throw a Error when a hooks options argument is not a object [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"options\\" to have type \\"object / undefined\\", got: \\"SomethingElse\\" [E029]"`;

exports[`tests for "ExpectedTypeError" [E029] should throw a Error when a hooks second parameter is not a function [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"fn\\" to have type \\"function\\", got: \\"string\\" [E029]"`;

exports[`tests for "ExpectedTypeError" [E029] should throw when "deleteModel" is called with no string [ExpectedTypeError] [E029] 1`] = `"Expected Argument \\"name\\" to have type \\"string\\", got: \\"true\\" [E029]"`;

exports[`tests for "FunctionCalledMoreThanSupportedError" [E003] should throw a Error when "addModelToTypegoose" got called more than once with the same model name [FunctionCalledMoreThanSupportedError] [E003] 1`] = `
"Function \\"addModelToTypegoose\\" only supports to be called \\"1\\" times with the same parameters [E003]
This was caused because the model name \\"TestMoreThanOnce\\" already exists in the typegoose-internal \\"models\\" cache"
`;

exports[`tests for "InvalidPropTypeError" [E013] PropType unknown (processProp) should throw a Error when a unknown PropType is used for "processProp#Passthrough" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(Passthrough)) is invalid for \\"ProcessPropPassthroughPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] PropType unknown (processProp) should throw a Error when a unknown PropType is used for "processProp#primitive" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(primitive)) is invalid for \\"ProcessPropRefPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] PropType unknown (processProp) should throw a Error when a unknown PropType is used for "processProp#ref" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(ref)) is invalid for \\"ProcessPropRefPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] PropType unknown (processProp) should throw a Error when a unknown PropType is used for "processProp#refPath" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(refPath)) is invalid for \\"ProcessPropRefPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] PropType unknown (processProp) should throw a Error when a unknown PropType is used for "processProp#subSchema" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(subSchema)) is invalid for \\"ProcessPropRefPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] should throw a Error when "PropType.MAP" is used for "processProp#refPath" [InvalidPropTypeError] [E013] 1`] = `"\\"1\\"(PropType(refPath)) is invalid for \\"ProcessPropRefPropType.test\\" [E013]"`;

exports[`tests for "InvalidPropTypeError" [E013] should throw a Error when a unknown PropType is used for "utils#initProperty" [InvalidPropTypeError] [E013] 1`] = `"\\"-1\\"(PropType(initProperty)) is invalid for \\"a1.a2\\" [E013]"`;

exports[`tests for "InvalidTypeError" [E009] should error if no valid type is supplied to PropType.ARRAY [InvalidTypeError] [E009] 1`] = `"\\"TestNoMetadataErrorAP.something\\"'s Type is invalid! Type is: \\"undefined\\" [E009]"`;

exports[`tests for "InvalidTypeError" [E009] should error if no valid type is supplied to PropType.MAP [InvalidTypeError] [E009] 1`] = `"\\"TestNoMetadataErrorMP.something\\"'s Type is invalid! Type is: \\"undefined\\" [E009]"`;

exports[`tests for "InvalidTypeError" [E009] should error if no valid type is supplied to PropType.NONE [InvalidTypeError] [E009] 1`] = `"\\"TestNME.test\\"'s Type is invalid! Type is: \\"undefined\\" [E009]"`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "_buildSchema" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"hello\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "addModelToTypegoose" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"not class\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "assignMetadata" (and "mergeMetadata") [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"true\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "buildSchema" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"hello\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "deleteModelWithClass" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"true\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "getDiscriminatorModelForClass" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"true\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "getModelForClass" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"hello\\""
`;

exports[`tests for "NoValidClassError" [E028] should error if no valid class is supplied to "mergeSchemaOptions" [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"true\\""
`;

exports[`tests for "NoValidClassError" [E028] should throw a Error when "cl" in "getName" is null or undefined [NoValidClassError] [E028] 1`] = `
"Value is not a function or does not have a constructor! [E028]
Value: \\"undefined\\""
`;

exports[`tests for "NotValidModelError" [E025] should throw a Error when no valid model is passed to "addModelToTypegoose" [NotValidModelError] [E025] 1`] = `"Expected \\"addModelToTypegoose.model\\" to be a valid mongoose.Model! (got: \\"string\\") [E025]"`;

exports[`tests for "NotValidModelError" [E025] should throw a Error when no valid model is passed to "getDiscriminatorModelForClass" [NotValidModelError] [E025] 1`] = `"Expected \\"getDiscriminatorModelForClass.from\\" to be a valid mongoose.Model! (got: \\"string\\") [E025]"`;

exports[`tests for "RefOptionIsUndefinedError" [E005] should error if "ref" is set to a function, but returns "null" or "undefined" [RefOptionIsUndefinedError] [E005] 1`] = `"Prop-Option \\"ref\\"'s value is \\"null\\" or \\"undefined\\" for \\"Main.nested\\" [E005]"`;

exports[`tests for "RefOptionIsUndefinedError" [E005] should error if ref is set but is "null" or "undefined" [RefOptionIsUndefinedError] [E005] 1`] = `"Prop-Option \\"ref\\"'s value is \\"null\\" or \\"undefined\\" for \\"RefUndefined.someref\\" [E005]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "processProp" when "refPath" is a string but does not meet the required length [StringLengthExpectedError] [E026] 1`] = `"Expected \\"refPath\\" to have at least length of \\"1\\" (got: (String: \\"0\\"), where: \\"TestRefPathString.test\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "processProp" when "refPath" is not a string [StringLengthExpectedError] [E026] 1`] = `"Expected \\"refPath\\" to have at least length of \\"1\\" (got: (not-String: \\"10\\"), where: \\"TestRefPathString.test\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.getName" when "customName" is defined as a function but does not return a String [StringLengthExpectedError] [E026] 1`] = `"Expected \\"options.customName(function)\\" to have at least length of \\"1\\" (got: (not-String: \\"10\\"), where: \\"DummyClass\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.getName" when "customName" is defined as a function but return does not meet the required length [StringLengthExpectedError] [E026] 1`] = `"Expected \\"options.customName(function)\\" to have at least length of \\"1\\" (got: (String: \\"0\\"), where: \\"DummyClass\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.getName" when "customName" is defined but not a String [StringLengthExpectedError] [E026] 1`] = `"Expected \\"options.customName\\" to have at least length of \\"1\\" (got: (not-String: \\"10\\"), where: \\"DummyClass\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.getName" when "customName" is defined but string does not meet the required length [StringLengthExpectedError] [E026] 1`] = `"Expected \\"options.customName\\" to have at least length of \\"1\\" (got: (String: \\"0\\"), where: \\"DummyClass\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.mergeMetadata" when "key" is a string but does not meet the required length [StringLengthExpectedError] [E026] 1`] = `"Expected \\"key\\" to have at least length of \\"1\\" (got: (String: \\"0\\"), where: \\"DummyClass\\") [E026]"`;

exports[`tests for "StringLengthExpectedError" [E026] should throw a Error in "utils.mergeMetadata" when "key" is not a string [StringLengthExpectedError] [E026] 1`] = `"Expected \\"key\\" to have at least length of \\"1\\" (got: (not-String: \\"undefined\\"), where: \\"DummyClass\\") [E026]"`;
