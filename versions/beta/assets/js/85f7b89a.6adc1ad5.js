"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[963],{1427:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"guides/known-issues","title":"Known Issues","description":"Known Issues","source":"@site/../docs/guides/known-issues.md","sourceDirName":"guides","slug":"/guides/known-issues","permalink":"/typegoose/versions/beta/docs/guides/known-issues","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/known-issues.md","tags":[],"version":"current","frontMatter":{"id":"known-issues","title":"Known Issues"},"sidebar":"guides","previous":{"title":"FAQ","permalink":"/typegoose/versions/beta/docs/guides/faq"},"next":{"title":"Mongoose Compatibility","permalink":"/typegoose/versions/beta/docs/guides/mongoose-compatibility"}}');var t=n(4848),i=n(8453);const r={id:"known-issues",title:"Known Issues"},c=void 0,a={},l=[{value:"Known Issues",id:"known-issues",level:2},{value:"transpile-only",id:"transpile-only",level:3},{value:"tsconfig-paths",id:"tsconfig-paths",level:3},{value:"Self-Containing classes",id:"self-containing-classes",level:3},{value:"Babel",id:"babel",level:3},{value:"esbuild",id:"esbuild",level:3},{value:"prop on get &amp; set",id:"prop-on-get--set",level:3},{value:"Webpack",id:"webpack",level:3},{value:"NodeJS 17.5 Breaking Change",id:"nodejs-175-breaking-change",level:3},{value:"<code>DocumentType</code> is not generic",id:"documenttype-is-not-generic",level:3},{value:"Typescript 5.0 ES Decorators",id:"typescript-50-es-decorators",level:3},{value:"Deferred function with explicit function",id:"deferred-function-with-explicit-function",level:3}];function d(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"known-issues",children:"Known Issues"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://github.com/Automattic/mongoose/issues?utf8=%E2%9C%93&q=is%3Aissue+involves%3Ahasezoey",children:"Please look here first, to decide if it is a Typegoose or a Mongoose issue."})}),"\n",(0,t.jsx)(s.h3,{id:"transpile-only",children:"transpile-only"}),"\n",(0,t.jsxs)(s.p,{children:["It is not recommended to run compilers with option ",(0,t.jsx)(s.code,{children:"transpile-only"})," (like ",(0,t.jsx)(s.code,{children:"tsc --transpile-only"})," or ",(0,t.jsx)(s.code,{children:"ts-node --transpile-only"}),"), because this will act like not having ",(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"})," enabled, see ",(0,t.jsx)(s.a,{href:"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata",children:'Use Without "emitDecoratorMetadata"'}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"tsconfig-paths",children:"tsconfig-paths"}),"\n",(0,t.jsxs)(s.p,{children:["TypeScript provides the option to alias paths (with ",(0,t.jsx)(s.code,{children:"tsconfig-paths"}),") but is somehow incompatible with Typegoose, ",(0,t.jsx)(s.a,{href:"https://github.com/szokodiakos/typegoose/issues/392",children:"more info in here"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"self-containing-classes",children:"Self-Containing classes"}),"\n",(0,t.jsx)(s.p,{children:"It is currently not (and probably never) possible to use a self-containing class:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:'class SomeClass {\n  @prop()\n  public ref: SomeClass; // ERROR "Maximum Class Stack Size Exceeded"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:"Though Deferred Reference will still work:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"class SomeClass {\n  @prop({ ref: () => SomeClass }) // or hardcode the string\n  public ref: Ref<SomeClass>;\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"babel",children:"Babel"}),"\n",(0,t.jsx)("span",{class:"badge badge--warning",children:"This Section may be outdated"}),"\n",(0,t.jsxs)(s.p,{children:["Using babel as a TypeScript compiler is known to cause problems (like incorrect types) (see ",(0,t.jsx)(s.a,{href:"#transpile-only",children:(0,t.jsx)(s.code,{children:"transpile-only"})}),"), it is recommended you use ",(0,t.jsx)(s.code,{children:"tsc"}),", ",(0,t.jsx)(s.code,{children:"ts-node"})," or ",(0,t.jsx)(s.code,{children:"ts-jest"})," directly."]}),"\n",(0,t.jsxs)(s.p,{children:["If Babel is still needed, then read ",(0,t.jsx)(s.a,{href:"https://babeljs.io/docs/en/babel-preset-typescript",children:"Babel TypeScript preset"})," and install the following plugins:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["To reproduce the typescript decorators (",(0,t.jsx)(s.code,{children:"experimentalDecorators"}),"), use ",(0,t.jsx)(s.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-decorators",children:(0,t.jsx)(s.code,{children:"@babel/plugin-proposal-decorators"})})]}),"\n",(0,t.jsxs)(s.li,{children:["To reproduce the decorator metadata output (",(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"}),"), use ",(0,t.jsx)(s.a,{href:"https://github.com/leonardfactory/babel-plugin-transform-typescript-metadata",children:(0,t.jsx)(s.code,{children:"babel-plugin-transform-typescript-metadata"})})]}),"\n",(0,t.jsxs)(s.li,{children:["Plugin ",(0,t.jsx)(s.a,{href:"https://babeljs.io/docs/en/babel-plugin-proposal-class-properties",children:(0,t.jsx)(s.code,{children:"@babel/plugin-proposal-class-properties"})})," is required to solve the error ",(0,t.jsx)(s.code,{children:"Syntax error, Definitely assigned fields cannot be initialized here, but only in the constructor"})," which would come with using decorators (legacy / stage 1) nowdays"]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{type:"info",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"})," is not strictly needed, see ",(0,t.jsxs)(s.a,{href:"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata",children:["Use Without ",(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"})]}),"."]})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"module.exports = {\n  plugins: [\n    ['@babel/plugin-proposal-decorators', { legacy: true }],\n    'babel-plugin-transform-typescript-metadata',\n    ['@babel/plugin-proposal-class-properties', { loose: true }],\n  ]\n}\n"})}),"\n",(0,t.jsx)(s.h3,{id:"esbuild",children:"esbuild"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"esbuild"})," and anything that uses it (",(0,t.jsx)(s.code,{children:"tsx"}),") are known to be a problem as ",(0,t.jsx)(s.code,{children:"esbuild"})," does not support ",(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["The workarounds are to either not use anything that uses ",(0,t.jsx)(s.code,{children:"esbuild"})," or follow ",(0,t.jsx)(s.a,{href:"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata",children:'Use Without "emitDecoratorMetadata"'}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"prop-on-get--set",children:"prop on get & set"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"@prop"})," cannot be applied to ",(0,t.jsx)(s.code,{children:"get"})," & ",(0,t.jsx)(s.code,{children:"set"})," (ES6 class keywords), because virtuals do not accept options & ",(0,t.jsx)(s.a,{href:"https://mongoosejs.com/docs/advanced_schemas.html#creating-from-es6-classes-using-loadclass",children:(0,t.jsx)(s.code,{children:"schema.loadClass"})})," wouldn't load these."]}),"\n",(0,t.jsx)(s.h3,{id:"webpack",children:"Webpack"}),"\n",(0,t.jsxs)(s.p,{children:["Webpack's ",(0,t.jsx)(s.code,{children:"minimize"})," cannot be used with typegoose, because typegoose relies heavily on reflection and property names."]}),"\n",(0,t.jsx)(s.p,{children:"In webpack, it can be disabled when adding the following to the webpack config:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-js",children:"module.exports = {\n  optimization: {\n    minimize: false\n  }\n}\n"})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["There are some workarounds for some minification problems, like the class name (which would be the model name) can be changed with ",(0,t.jsx)(s.a,{href:"../api/decorators/model-options#customname",children:(0,t.jsx)(s.code,{children:"customName"})}),"."]})}),"\n",(0,t.jsx)(s.h3,{id:"nodejs-175-breaking-change",children:"NodeJS 17.5 Breaking Change"}),"\n",(0,t.jsx)(s.p,{children:"NodeJS 17.5 was released, which included a breaking change for mongoose, which resulted in a error (/ crash of the application)."}),"\n",(0,t.jsxs)(s.p,{children:["Mongoose has released version ",(0,t.jsx)(s.code,{children:"6.2.2"})," on 16.2.22 (d/m/y) which fixes the issue on mongoose's side.",(0,t.jsx)(s.br,{}),"\n","Since 24.2.22 (d/m/y) NodeJS 17.6 is released which should include the fix."]}),"\n",(0,t.jsxs)(s.h3,{id:"documenttype-is-not-generic",children:[(0,t.jsx)(s.code,{children:"DocumentType"})," is not generic"]}),"\n",(0,t.jsxs)(s.p,{children:["Typescript has its own ",(0,t.jsx)(s.code,{children:"DocumentType"})," when having ",(0,t.jsx)(s.code,{children:"DOM"})," enabled in ",(0,t.jsx)(s.code,{children:"tsconfig"})," option ",(0,t.jsx)(s.code,{children:"lib"}),", in any case the correct ",(0,t.jsx)(s.code,{children:"DocumentType"})," has to be imported directly from typegoose.",(0,t.jsx)(s.br,{}),"\n","It is also recommended to remove the option ",(0,t.jsx)(s.code,{children:"DOM"})," from the ",(0,t.jsx)(s.code,{children:"tsconfig"})," option ",(0,t.jsx)(s.code,{children:"lib"})," when possible."]}),"\n",(0,t.jsx)(s.h3,{id:"typescript-50-es-decorators",children:"Typescript 5.0 ES Decorators"}),"\n",(0,t.jsxs)(s.p,{children:["Typescript 5.0 has support for ES Decorators (Stage 3) so ",(0,t.jsx)(s.code,{children:"@decorator"})," is now valid syntax whether ",(0,t.jsx)(s.code,{children:"experimentalDecorators"})," is ",(0,t.jsx)(s.code,{children:"true"})," or ",(0,t.jsx)(s.code,{children:"false"})," (Stage 2), but the implementations are not type and runtime compatible and would require special handling, also the new ES Decorators (Stage 3) ",(0,t.jsx)(s.em,{children:"dont support metadata"}),", which typegoose heavily relies on. (and no ",(0,t.jsxs)(s.a,{href:"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata",children:["use without ",(0,t.jsx)(s.code,{children:"emitDecoratorMetadata"})]})," cannot be used as a workaround)."]}),"\n",(0,t.jsxs)(s.p,{children:["TL;DR: typegoose currently does not support ES Decorators (Stage 3) and ",(0,t.jsx)(s.code,{children:"experimentalDecorators: true"})," has to be enabled."]}),"\n",(0,t.jsxs)(s.p,{children:["Example Error: ",(0,t.jsx)(s.code,{children:"Unable to resolve signature of property decorator when called as an expression. Argument of type 'undefined' is not assignable to parameter of type 'Object'.ts(1240)"})]}),"\n",(0,t.jsx)(s.h3,{id:"deferred-function-with-explicit-function",children:"Deferred function with explicit function"}),"\n",(0,t.jsx)(s.p,{children:"When deferred functions are using with explicit functions, then the expected resulting type is not actually returned."}),"\n",(0,t.jsxs)(s.p,{children:["Example of a deferred function: ",(0,t.jsx)(s.code,{children:"type: () => Something"}),(0,t.jsx)(s.br,{}),"\n","Example of a explicit function: ",(0,t.jsx)(s.code,{children:"type: function() { return Something; }"})]}),"\n",(0,t.jsxs)(s.p,{children:["Explicit functions can implicitly occur if the ",(0,t.jsx)(s.code,{children:"tsconfig"}),"'s ",(0,t.jsx)(s.code,{children:"target"})," is not set to at least ",(0,t.jsx)(s.code,{children:"es6"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["The reason currently is that there is not a good way to differentiate between classes\xb9, functions like ",(0,t.jsx)(s.code,{children:"String"}),"\xb2, and other function like mongoose's types\xb3 which are callable without ",(0,t.jsx)(s.code,{children:"new"})," (could likely be worked around), but it is not worth the performance to check for all of this and likely also does not cover all the bases."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["\xb9: classes could be differentiated with ",(0,t.jsx)(s.code,{children:"/^class\\s/.test(Function.prototype.toString.call(obj))"})]}),"\n",(0,t.jsxs)(s.li,{children:["\xb2: native types could be differentiated with ",(0,t.jsx)(s.code,{children:"/\\[native code\\]/.test(Function.prototype.toString.call(obj))"}),", but what about mocked or proxied types?"]}),"\n",(0,t.jsxs)(s.li,{children:["\xb3: could likely be differenitated by matching references & names against ",(0,t.jsx)(s.code,{children:"mongoose.Types.*"})," and ",(0,t.jsx)(s.code,{children:"mongoose.Schema.Types.*"})]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var o=n(6540);const t={},i=o.createContext(t);function r(e){const s=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:s},e.children)}}}]);