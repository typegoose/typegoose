"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[8914],{3827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/types/return-model-type","title":"ReturnModelType<T, QueryHelpers>","description":"Typings:","source":"@site/../docs/api/types/returnModelType.md","sourceDirName":"api/types","slug":"/api/types/return-model-type","permalink":"/typegoose/versions/beta/docs/api/types/return-model-type","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/types/returnModelType.md","tags":[],"version":"current","frontMatter":{"id":"return-model-type","title":"ReturnModelType<T, QueryHelpers>"},"sidebar":"docs","previous":{"title":"DocumentType<T, QueryHelpers>","permalink":"/typegoose/versions/beta/docs/api/types/document-type"},"next":{"title":"Ref<PopulatedType, RawId>","permalink":"/typegoose/versions/beta/docs/api/types/ref-type"}}');var o=n(4848),r=n(8453);const d={id:"return-model-type",title:"ReturnModelType<T, QueryHelpers>"},l=void 0,i={},c=[{value:"Example",id:"example",level:2},{value:"Difference to <code>ModelType</code>",id:"difference-to-modeltype",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Typings:"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"type ReturnModelType<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>\n"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,o.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,o.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,o.jsx)(t.code,{children:"U"})," ",(0,o.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,o.jsx)(t.td,{style:{textAlign:"center"},children:(0,o.jsx)(t.code,{children:"AnyParamConstructor<any>"})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"The type of a Class to get a Model type of"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{style:{textAlign:"left"},children:(0,o.jsx)(t.code,{children:"QueryHelpers"})}),(0,o.jsx)(t.td,{style:{textAlign:"center"},children:(0,o.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/query-method",children:(0,o.jsx)(t.code,{children:"QueryHelpers"})})}),(0,o.jsx)(t.td,{style:{textAlign:"left"},children:"Add Query Helpers to the type"})]})]})]}),"\n",(0,o.jsxs)(t.p,{children:["The Type ",(0,o.jsx)(t.code,{children:"ReturnModelType<T, QueryHelpers>"})," is the type used to have type information for a class converted to a Mongoose Model."]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"T"})," is the logical ",(0,o.jsx)(t.code,{children:"AND"})," of ",(0,o.jsx)(t.code,{children:"mongoose.Model<DocumentType<T>>"})," and ",(0,o.jsx)(t.code,{children:"T"})]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.code,{children:"QueryHelpers"})," is for a Query-Helpers interface, ",(0,o.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/query-method",children:"more here"})]}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["When using Classes directly it has to always be ",(0,o.jsx)(t.code,{children:"typeof Class"}),", to get the static representation of a class instead of the instance of a class."]})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["This type should always be used over (internal) ",(0,o.jsx)(t.code,{children:"ModelType"}),","]})}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'class Kitten {\n  @prop()\n  public name?: string;\n\n  // this is a Model Method\n  public static findByName(this: ReturnModelType<typeof Kitten>, name: string) {\n    return this.find({ name }).exec(); // thanks to "ReturnModelType" "this" has type information\n  }\n}\n\nconst KittenModel: ReturnModelType<typeof Kitten> = getModelForClass(Kitten);\n'})}),"\n",(0,o.jsxs)(t.h2,{id:"difference-to-modeltype",children:["Difference to ",(0,o.jsx)(t.code,{children:"ModelType"})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"ModelType"})," is the logical ",(0,o.jsx)(t.code,{children:"AND"})," of ",(0,o.jsx)(t.code,{children:"mongoose.Model<DocumentType<T>>"})," and ",(0,o.jsx)(t.code,{children:"T"})," whereas ",(0,o.jsx)(t.code,{children:"ReturnModelType"})," is an extension to ",(0,o.jsx)(t.code,{children:"ModelType"}),":\n",(0,o.jsx)(t.code,{children:"ModelType<InstanceType<U>> & U"})]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var s=n(6540);const o={},r=s.createContext(o);function d(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);