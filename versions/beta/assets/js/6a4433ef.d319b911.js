"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[3055],{7350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/types/ref-type","title":"Ref<PopulatedType, RawId>","description":"Typings:","source":"@site/../docs/api/types/ref-type.md","sourceDirName":"api/types","slug":"/api/types/ref-type","permalink":"/typegoose/versions/beta/docs/api/types/ref-type","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/types/ref-type.md","tags":[],"version":"current","frontMatter":{"id":"ref-type","title":"Ref<PopulatedType, RawId>"},"sidebar":"docs","previous":{"title":"ReturnModelType<T, QueryHelpers>","permalink":"/typegoose/versions/beta/docs/api/types/return-model-type"},"next":{"title":"Additional Types","permalink":"/typegoose/versions/beta/docs/api/types/additional-types"}}');var r=n(4848),i=n(8453);const d={id:"ref-type",title:"Ref<PopulatedType, RawId>"},l=void 0,o={},c=[{value:"Example",id:"example",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Typings:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"type Ref<\n  PopulatedType,\n  RawId extends mongoose.RefType = PopulatedType extends { _id?: mongoose.RefType }\n    ? NonNullable<PopulatedType['_id']>\n    : mongoose.Types.ObjectId\n>\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"PopulatedType"})," ",(0,r.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The Type of the what is expected when it is populated"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"RawId"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"mongoose.RefType"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Overwrite the Reference type (the type of ",(0,r.jsx)(t.code,{children:"_id"})," of ",(0,r.jsx)(t.code,{children:"PopulatedType"}),")"]})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["The Type ",(0,r.jsx)(t.code,{children:"Ref<PopulatedType, RawId>"})," is the type used for ",(0,r.jsx)(t.a,{href:"https://mongoosejs.com/docs/populate.html",children:"References"}),"."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"PopulatedType"}),": This is the Class being referenced."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"RawId"}),": This should be the ",(0,r.jsx)(t.code,{children:"_id"})," Type of the referenced Class, by default its ",(0,r.jsx)(t.code,{children:"mongoose.Types.ObjectId"})," and should get automatically inferred if a ",(0,r.jsx)(t.code,{children:"_id"})," property is present on the target class."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"There are typeguards to check if a reference is populated or of the reference type:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/functions/typeguards/is-document",children:(0,r.jsx)(t.code,{children:"isDocument"})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/functions/typeguards/is-ref-type",children:(0,r.jsx)(t.code,{children:"isRefType"})})}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["For more and better explained examples, look at the ",(0,r.jsx)(t.a,{href:"/typegoose/versions/beta/docs/guides/advanced/reference-other-classes",children:"Reference Other Classes"})," Guide."]})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Class to-be-referenced:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"class Kitten {\n  @prop()\n  public name?: string;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Single Reference:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"class Person {\n  @prop({ ref: () => Kitten })\n  public pet?: Ref<Kitten>;\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"Reference Array:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"class Cat {\n  @prop({ ref: () => Kitten })\n  public babies?: Ref<Kitten>[];\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Reference with different ",(0,r.jsx)(t.code,{children:"_id"})," type:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'class Kitten {\n  @prop()\n  public _id?: string;\n\n  @prop()\n  public name?: string;\n}\n\n// For Single References\nclass Person {\n  // The "type" options in this case refers to the "_id" type of the referenced class, by default it will be "ObjectId"\n  @prop({ ref: () => Kitten, type: () => String })\n  public pet?: Ref<Kitten, string>;\n}\n\n// For a Array of References\nclass Person {\n  // The "type" options in this case refers to the "_id" type of the referenced class, by default it will be "ObjectId"\n  @prop({ ref: () => Kitten, type: () => String })\n  public pet?: Ref<Kitten, string>[];\n}\n'})})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function d(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);