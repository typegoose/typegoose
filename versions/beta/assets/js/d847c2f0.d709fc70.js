"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1093],{6324:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"api/decorators/prop","title":"@prop","description":"Typings:","source":"@site/../docs/api/decorators/prop.md","sourceDirName":"api/decorators","slug":"/api/decorators/prop","permalink":"/typegoose/versions/beta/docs/api/decorators/prop","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/decorators/prop.md","tags":[],"version":"current","frontMatter":{"id":"prop","title":"@prop"},"sidebar":"docs","previous":{"title":"Environment Variables","permalink":"/typegoose/versions/beta/docs/api/environment-variables"},"next":{"title":"@modelOptions","permalink":"/typegoose/versions/beta/docs/api/decorators/model-options"}}');var r=s(4848),t=s(8453);const l={id:"prop",title:"@prop"},o=void 0,a={},d=[{value:"Single Options",id:"single-options",level:2},{value:"required",id:"required",level:3},{value:"index",id:"index",level:3},{value:"unique",id:"unique",level:3},{value:"default",id:"default",level:3},{value:"_id",id:"_id",level:3},{value:"ref",id:"ref",level:3},{value:"refPath",id:"refpath",level:3},{value:"validate",id:"validate",level:3},{value:"alias",id:"alias",level:3},{value:"select",id:"select",level:3},{value:"get &amp; set",id:"get--set",level:3},{value:"type",id:"type",level:3},{value:"enum",id:"enum",level:3},{value:"addNullToEnum",id:"addnulltoenum",level:3},{value:"discriminators",id:"discriminators",level:3},{value:"innerOptions",id:"inneroptions",level:3},{value:"outerOptions",id:"outeroptions",level:3},{value:"allowMixed",id:"allowmixed",level:3},{value:"Array Options",id:"array-options",level:2},{value:"dim",id:"dim",level:3},{value:"Map Options",id:"map-options",level:2},{value:"String Transform options",id:"string-transform-options",level:2},{value:"lowercase",id:"lowercase",level:3},{value:"uppercase",id:"uppercase",level:3},{value:"trim",id:"trim",level:3},{value:"String Validation options",id:"string-validation-options",level:2},{value:"maxlength",id:"maxlength",level:3},{value:"minlength",id:"minlength",level:3},{value:"match",id:"match",level:3},{value:"Number Validation options",id:"number-validation-options",level:2},{value:"max",id:"max",level:3},{value:"min",id:"min",level:3},{value:"Virtual Populate Options",id:"virtual-populate-options",level:2},{value:"ref",id:"virtual-populate-ref",level:3},{value:"foreignField",id:"foreignfield",level:3},{value:"localField",id:"localfield",level:3},{value:"justOne",id:"justone",level:3},{value:"count",id:"count",level:3},{value:"options",id:"virtual-populate-options-option",level:3},{value:"match",id:"virtual-populate-match",level:3},{value:"PropType",id:"proptype",level:2},{value:"Passthrough Class",id:"passthrough-class",level:2},{value:"Non-Direct",id:"passthrough-nondirect",level:3},{value:"Direct",id:"passthrough-direct",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Typings:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function prop(\n  options?: BasePropOptions | ArrayPropOptions | MapPropOptions | PropOptionsForNumber | PropOptionsForString | VirtualOptions,\n  kind?: PropType\n): PropertyDecorator\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:"Type"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,r.jsx)(n.code,{children:"options"})," ",(0,r.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"BasePropOptions"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"The Option to set for the following property"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.code,{children:"kind"})}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:(0,r.jsx)(n.a,{href:"#proptype",children:(0,r.jsx)(n.code,{children:"PropType"})})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Overwrite what Kind is used"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"@prop"})," is used to mark properties to be in the Schema and also set Options of that property."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Any Property that does not have ",(0,r.jsx)(n.code,{children:"@prop"})," on it will not be in the Schema, because typegoose's current approach is that the keys for the schema get defined in ",(0,r.jsx)(n.code,{children:"@prop"}),", unlike ",(0,r.jsx)(n.code,{children:"class-transformer"}),"'s global-",(0,r.jsx)(n.code,{children:"@Expose"})," and ",(0,r.jsx)(n.code,{children:"@Exclude"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"single-options",children:"Single Options"}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Cat {\n  @prop()\n  public name?: string;\n}\n\nclass Cat2 {\n  @prop({ type: () => String }) // explicitly define the Type\n  public name?: string;\n}\n\nclass Cat3 {\n  @prop({ type: () => String }, PropType) // explicitly define the "PropType"\n  public name?: string;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"required",children:"required"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set this to true, if the property is required (best practice is ",(0,r.jsx)(n.code,{children:"public property!: any"}),", note the ",(0,r.jsx)(n.code,{children:"!"}),")",(0,r.jsx)(n.br,{}),"\n","For more information see the ",(0,r.jsx)(n.a,{href:"http://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-required",children:"mongoose documentation"})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Something {\n  @prop({ required: true }) // this is now required in the schema\n  public firstName!: string;\n\n  @prop() // by default, a property is not required\n  public lastName?: string; // using the "?" marks the property as optional\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"index",children:"index"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create an Index for this Property. Should act like the ",(0,r.jsx)(n.code,{children:"@index"})," class decorator, but without options."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class IndexedClass {\n  @prop({ index: true })\n  public indexedField?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unique",children:"unique"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Create an Index that sets this property to be ",(0,r.jsx)(n.a,{href:"http://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-unique",children:"unique"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class IndexedClass {\n  @prop({ unique: true }) // implicitly has "index: true"\n  public uniqueId?: string;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"default",children:"default"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"any"})]}),"\n",(0,r.jsx)(n.p,{children:"Set a default, when no value is given at creation time."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Defaulted {\n  @prop({ default: 'hello world' })\n  public upperCase?: string; // mark as optional, because it will be defaulted\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You may also set the ",(0,r.jsx)(n.code,{children:"default"})," schema option to a function. Mongoose will execute that function and use the return value as the default."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Defaulted {\n  @prop({ required: true })\n  firstName!: string\n  @prop({ required: true })\n  lastName!: string\n  \n  @prop({ \n    default: function (this: DocumentType<Defaulted>) {\n      return `${this.firstName} ${this.lastName}`\n    }\n  })\n  public fullName?: string; // mark as optional, because it will be defaulted\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To have the ",(0,r.jsx)(n.code,{children:"this"})," keyword correctly typed, you have to pass a defined ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters",children:"this parameter"}),"."]})}),"\n",(0,r.jsx)(n.h3,{id:"_id",children:"_id"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set this to ",(0,r.jsx)(n.code,{children:"false"}),", if you want to turn off creating IDs for sub-documents."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Nested {}\n\nclass Parent {\n  @prop({ _id: false })\n  public nest: Nested;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ref",children:"ref"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"Class | string"})]}),"\n",(0,r.jsx)(n.p,{children:"Set which class to use for Reference (this cannot be inferred by the type)."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.a,{href:"/typegoose/versions/beta/docs/guides/advanced/reference-other-classes#common-problems",children:["Look here where ",(0,r.jsx)(n.code,{children:"Class"})," cannot be used"]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Kitten {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  // single examples\n  @prop({ ref: () => Kitten })\n  public kitten?: Ref<Kitten>;\n  // or\n  @prop({ ref: 'Kitten' })\n  public kitten?: Ref<Kitten>;\n\n  // array examples\n  @prop({ ref: () => Kitten })\n  public kittens?: Ref<Kitten>[];\n  // or\n  @prop({ ref: 'Kitten' })\n  public kittens?: Ref<Kitten>[];\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"'Nested'"}),"(as string) form is useful to avoid unintuitive errors due to circular dependencies, such as ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/error-warning-details#ref-is-undefined-e005",children:(0,r.jsx)(n.code,{children:'Option "ref" for "${name}.${key}" is null/undefined! [E005]'})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"refpath",children:"refPath"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsx)(n.p,{children:"Set which path to look for which Class to use."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Car {}\nclass Shop {}\n\n// in another class\nclass Another {\n  @prop({ required: true, enum: 'Car' | 'Shop' })\n  public which!: string;\n\n  @prop({ refPath: 'which' })\n  public kind?: Ref<Car | Shop>;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"validate",children:"validate"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"object"})," OR ",(0,r.jsx)(n.code,{children:"RegExp"})," OR ",(0,r.jsx)(n.code,{children:"(value) => boolean"})," OR ",(0,r.jsx)(n.code,{children:"object[]"})," Required options of the object:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"validator"}),": ",(0,r.jsx)(n.code,{children:"(value) => boolean"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message"}),": ",(0,r.jsx)(n.code,{children:"String"}),", the message shows when the validator fails"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Set a custom function for validation (must return a boolean)."}),"\n",(0,r.jsxs)(n.p,{children:["Example: (For more Examples look at ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-validate",children:"Mongoose's Documentation"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// \"maxlength\" already exists as an option, this just shows how to use validate\nclass Validated {\n  @prop({\n    validate: {\n      validator: (v) => {\n        return v.length <= 10;\n      },\n      message: 'value is over 10 characters long!'\n    }\n  })\n  public validated?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alias",children:"alias"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsx)(n.p,{children:"Set an Alias for a property (best practice is to add type information for it)."}),"\n",(0,r.jsxs)(n.p,{children:["-> For more information see the ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/guide.html#aliases",children:"mongoose documentation"})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  @prop({ alias: 'helloWorld' })\n  public hello: string; // will be included in the DB\n  public helloWorld: string; // will NOT be included in the DB, just for type completion (gets passed as hello in the DB)\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"select",children:"select"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set it to ",(0,r.jsx)(n.code,{children:"false"}),", if you want to retrieve data without this property by default",(0,r.jsx)(n.br,{}),"\n","-> ",(0,r.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-select",children:"Read more in Mongoose's official documentation"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  @prop({ select: false })\n  public hello: string;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to retrieve a prop marked as ",(0,r.jsx)(n.code,{children:"select: false"}),", you must explicitly ask for it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// find all in the collection and have the \"hello\" property selected\nconst dummies = await DummyModel.find().select('+hello').exec();\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"select()"})," accepts an array as well"]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"select()"})," accepts a long string with space as a separator"]})}),"\n",(0,r.jsx)(n.h3,{id:"get--set",children:"get & set"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"(input) => output"})]}),"\n",(0,r.jsx)(n.p,{children:"Set getters & setters for fields, it is not virtual."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.code,{children:"get"})," & ",(0,r.jsx)(n.code,{children:"set"})," must be defined all the time, even when just wanting to use one."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.a,{href:"#proptype",children:"PropType"})," (Primitive / Array / Map) is different from what is got from the reflection, it requires ",(0,r.jsx)(n.strong,{children:"explicit"})," setting that it is different"]})}),"\n",(0,r.jsx)(n.p,{children:"Pre-process string to string:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  @prop({ set: (val: string) => val.toLowerCase(), get: (val: string) => val })\n  public hello: string;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Store string, runtime have string array (string array to string):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Dummy {\n  // this value is a "string-array" during runtime and is stored in the database as a "primite-string"\n  @prop({ set: (val: string[]) => val.join(\' \'), get: (val: string) => val.split(\' \'), type: String }, PropType.NONE) // requires explicit setting of "PropType"\n  public fullName?: string[];\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"any | any[] | () => (any | any[])"})]}),"\n",(0,r.jsxs)(n.p,{children:["Overwrite the type generated for the ",(0,r.jsx)(n.code,{children:"design:type"})," reflection."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  // explicitly set type\n  @prop({ type: String })\n  public version1: string;\n\n  // supports deferred-function style\n  @prop({ type: () => String })\n  public version2: string;\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Mongoose initializes arrays with ",(0,r.jsx)(n.code,{children:"[]"})," instead of ",(0,r.jsx)(n.code,{children:"null"})," / ",(0,r.jsx)(n.code,{children:"undefined"})]})}),"\n",(0,r.jsx)(n.p,{children:"Example: Arrays (array item types can't be automatically inferred via reflection)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Dummy {\n  @prop({ type: String })\n  public hello1: string[];\n\n  // supports wrapping type in nested arrays\n  // nested arrays are counted and will be used as option "dim"\n  @prop({ type: [[String]] })\n  public hello2: string[][];\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["(",(0,r.jsx)(n.code,{children:"type: [[String]]"})," is equivalent to ",(0,r.jsx)(n.a,{href:"#dim",children:(0,r.jsx)(n.code,{children:"type: String, dim: 2"})}),")"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Since typegoose 12.11.0, ",(0,r.jsx)(n.code,{children:"type: [TYPE]"})," will also infer ",(0,r.jsx)(n.a,{href:"#proptype",children:(0,r.jsx)(n.code,{children:"PropType.ARRAY"})}),", unless manually specified."]})}),"\n",(0,r.jsxs)(n.p,{children:["Example: get as ",(0,r.jsx)(n.code,{children:"string[]"}),", save as ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  @prop({ set: (val: string[]) => val.join(' '), get: (val: string) => val.split(' '), type: String })\n  public hello: string[];\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example: Overwrite type for an enum."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum SomeEnum {\n  One,\n  Two\n}\nclass Dummy {\n  @prop({ enum: SomeEnum, type: Number })\n  public enumprop: SomeEnum;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Example: Overwrite the inferred type as a last resort."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Dummy {\n  @prop({ type: mongoose.Schema.Types.Mixed }) // used for mongoose / how it is stored to the DB\n  public something: NewableFunction; // used for intellisense / TypeScript\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"enum",children:"enum"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"TypescriptEnum | (string | number)[]"})]}),"\n",(0,r.jsx)(n.p,{children:"Only allow values from the enum (best practice is to use TypeScript's enum)."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"design:type"})," will be set to ",(0,r.jsx)(n.code,{children:"String"}),", if the enum is full of Strings, and ",(0,r.jsx)(n.code,{children:"Number"}),", if full of Numbers and ",(0,r.jsx)(n.code,{children:"Object"})," of the enum contains both."]})}),"\n",(0,r.jsx)(n.p,{children:"Example for String-Enums:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum Gender {\n  MALE = 'male',\n  FEMALE = 'female'\n}\n\nclass Enumed {\n  @prop({ enum: Gender })\n  public gender?: Gender;\n\n  // typegoose enum also supports deferred function\n  @prop({ enum: () => Gender })\n  public gender?: Gender;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for Number-Enums:",(0,r.jsx)(n.br,{}),"\n","(since mongoose 5.8 and typegoose 6.2)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'enum Gender {\n  MALE, // equal to "= 0"\n  FEMALE // equal to "= 1"\n}\n\nclass Enumed {\n  @prop({ enum: Gender })\n  public gender?: Gender;\n\n  // typegoose enum also supports deferred function\n  @prop({ enum: Gender })\n  public gender?: Gender;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Known-Issues:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Babel doesn't set the type for enums correctly. They need to be set manually with ",(0,r.jsxs)(n.a,{href:"#type",children:["the ",(0,r.jsx)(n.code,{children:"type"})," option"]})]}),"\n",(0,r.jsxs)(n.li,{children:["If transpiling your code with ",(0,r.jsx)(n.code,{children:"tsc --transpile-only"})," or ",(0,r.jsx)(n.code,{children:"ts-node -- transpile-only"}),", then the ",(0,r.jsx)(n.code,{children:"--transpile-only"})," needs to be removed or the type needs to be set manually with ",(0,r.jsxs)(n.a,{href:"#type",children:["the ",(0,r.jsx)(n.code,{children:"type"})," option"]})," (see ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/known-issues#babel",children:"Known-Issues: Babel"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"addnulltoenum",children:"addNullToEnum"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Adds ",(0,r.jsx)(n.code,{children:"null"})," to the enum array."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This doesn't work if the value is ",(0,r.jsx)(n.code,{children:"required"})]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum SomeNumberEnum {\n  one = 1,\n  two = 2\n}\nclass AddNullToEnum {\n  @prop({ enum: SomeNumberEnum, addNullToEnum: true })\n  public value?: SomeNumberEnum;\n}\n\nconst AddNullToEnumModel = getModelForClass(AddNullToEnum);\n\nAddNullToEnumModel.schema.path('value').options.enum === [1, 2, null]; // true\n\n// this is necessary to avoid a validation error\nnew AddNullToEnumModel({ value: null } as AddNullToEnum);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"discriminators",children:"discriminators"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"() => [DiscriminatorObject | Class]"})]}),"\n",(0,r.jsx)(n.p,{children:"Use this function for embedded discriminators."}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/advanced/nested-discriminators",children:"Nested Discriminators"})," for a guide on how to use nested Discriminators."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["A Error is thrown when both this option and the model-option ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#discriminators",children:(0,r.jsx)(n.code,{children:"discriminators"})})," are defined.",(0,r.jsx)(n.br,{}),"\n","See ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/error-warning-details#duplicate-option-definition-e032",children:"Duplicate Option Definition [E032]"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"discriminatorKey"})," (like in the example property ",(0,r.jsx)(n.code,{children:"type"}),") needs to be always set in a newly created document (via ",(0,r.jsx)(n.code,{children:".create({ type: 'yourKey' })"}),", or ",(0,r.jsx)(n.code,{children:".save()"}),")"]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["There currently is no typegoose built-in way to get the models the ",(0,r.jsx)(n.code,{children:"path.discriminator"})," call would return, see ",(0,r.jsx)(n.a,{href:"https://github.com/typegoose/typegoose/issues/744",children:"typegoose/typegoose#744"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"[Class]"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'type'\n  }\n})\nclass Building {\n  @prop({ default: 100 })\n  public width: number;\n\n  @prop({ required: true })\n  public type: string;\n}\n\nclass Garage extends Building {\n  @prop({ default: 10 })\n  public slotsForCars: number;\n}\n\nclass SummerHouse extends Building {\n  @prop({ default: 100 })\n  public distanceToLake: number;\n}\n\nclass Area {\n  @prop({ type: Building, discriminators: () => [Garage, SummerHouse] })\n  public buildings: Building[];\n}\n\nconst AreaModel = getModelForClass(Area);\n\n// then somewhere in an async function\nconst area = await AreaModel.create({});\narea.buildings.push({ type: getName(SummerHouse), distanceToLake: 100 } as SummerHouse);\narea.buildings.push({ type: getName(Garage), slotsForCars: 20 } as Garage);\nawait area.save();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"[DiscriminatorObject]"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"@modelOptions({\n  schemaOptions: {\n    discriminatorKey: 'type'\n  }\n})\nclass Building {\n  @prop({ default: 100 })\n  public width: number;\n\n  @prop({ required: true })\n  public type: string;\n}\n\nclass Garage extends Building {\n  @prop({ default: 10 })\n  public slotsForCars: number;\n}\n\nclass SummerHouse extends Building {\n  @prop({ default: 100 })\n  public distanceToLake: number;\n}\n\nclass Area {\n  @prop({\n    type: Building,\n    discriminators: () => [\n      { type: Garage, value: 'G' },\n      { type: SummerHouse, value: 'S' }\n    ]\n  })\n  public buildings: Building[];\n}\n\nconst AreaModel = getModelForClass(Area);\n\n// then somewhere in an async function\nconst area = await AreaModel.create({});\narea.buildings.push({ type: 'S', distanceToLake: 100 } as SummerHouse);\narea.buildings.push({ type: 'G', slotsForCars: 20 } as Garage);\nawait area.save();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"inneroptions",children:"innerOptions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"innerOptions"}),' is used to override options at the "Type" level']}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Use this only when absolutely necessary and please open a new issue about it"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This option can be used everywhere ",(0,r.jsx)(n.code,{children:"mapOptions"})," function is called (currently being ",(0,r.jsx)(n.code,{children:"PropType.ARRAY"})," and ",(0,r.jsx)(n.code,{children:"PropType.MAP"}),")"]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Something {\n  @prop({ required: true })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String }],\n  required: true\n}\n\n// when using the override\nclass Something {\n  @prop({ innerOptions: { required: true } })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String, required: true }]\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"outeroptions",children:"outerOptions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"outerOptions"}),' is used to override options at the "Array" level']}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Use this only when absolutely necessary and please open a new issue about it"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This option can be used everywhere ",(0,r.jsx)(n.code,{children:"mapOptions"})," function is called (currently being ",(0,r.jsx)(n.code,{children:"PropType.ARRAY"})," and ",(0,r.jsx)(n.code,{children:"PropType.MAP"}),")"]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Something {\n  @prop({ maxlength: 1 })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String, maxlength: 1 }]\n}\n\n// when using the override\nclass Something {\n  @prop({ outerOptions: { maxlength: 1 } })\n  public propy: string[];\n}\n\n// This would be mapped to\n{\n  type: [{ type: String }],\n  maxlength: 1\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"allowmixed",children:"allowMixed"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"allowMixed"})," is used to set a custom ",(0,r.jsx)(n.code,{children:"warnMixed"})," Severity for a specific Property.",(0,r.jsx)(n.br,{}),"\n","Takes priority over class-wide ",(0,r.jsx)(n.code,{children:"allowMixed"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#allowmixed",children:(0,r.jsx)(n.code,{children:"modelOptions#allowMixed"})})," for all possible variants for the enum."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Something {\n  @prop({ allowMixed: Severity.ERROR, type: () => mongoose.Schema.Types.Mixed })\n  public propy?: any;\n}\n\nbuildSchema(Something); // would throw a "warnMixed" error\n'})}),"\n",(0,r.jsx)(n.h2,{id:"array-options",children:"Array Options"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Option ",(0,r.jsx)(n.code,{children:"type"})," must be provided, otherwise the array will result in ",(0,r.jsx)(n.code,{children:"Mixed"})," ",(0,r.jsx)(n.a,{href:"https://github.com/typegoose/typegoose/issues/300",children:"read typegoose issue #300 for more info"})]})}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Kitten {\n  @prop()\n  public name?: string;\n}\n\nclass Cat {\n  @prop({ type: () => [Kitten] })\n  public kitten?: Kitten[]; // "[]" or "Array<any>" or "mongoose.Types.Array<any>" or "mongoose.Types.DocumentArray" is needed to be detected as an Array\n}\n\nclass Cat2 {\n  @prop({ type: () => [Kitten] }, PropType.ARRAY) // explicitly define the "PropType"\n  public kitten?: Kitten[];\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dim",children:"dim"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"dim"})," is used to set the Dimensions this array should have (for something like a matrix)",(0,r.jsx)(n.br,{}),"\n","-> needs to be higher than 0",(0,r.jsx)(n.br,{}),"\n","-> ",(0,r.jsxs)(n.strong,{children:["This Option is overridden by using ",(0,r.jsx)(n.code,{children:"type () => [Type]"})]})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Something {\n  @prop({ dim: 3, type: String })\n  public propy: string[][][];\n  //or\n  @prop({ type: () => [[[String]]] })\n  public propy: string[][][];\n}\n\n// This would be mapped to\n{\n  type: [[[{ type: String }]]]\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The option ",(0,r.jsx)(n.code,{children:"dim"})," can be omitted when used with the ",(0,r.jsx)(n.code,{children:"() => [Type]"})," syntax (since ",(0,r.jsx)(n.code,{children:"7.4.0"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class ArrayInType {\n  @prop({ type: () => [[String]] }) // dim is 2\n  public propy: string[][];\n\n  @prop({ type: () => [String] }) // dim is 1\n  public propy: string[];\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"map-options",children:"Map Options"}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class SomeMapClass1 {\n  @prop({ type: String })\n  public lookup?: Map<string, string>; // "Map<any, any>" or "mongoose.Types.Map<any>" is needed to be detected as a Map\n}\n\nclass SomeMapClass2 {\n  @prop({ type: () => String }, PropType.MAP) // explicitly define the "PropType"\n  public lookup?: Map<string, string>;\n}\n\n// Extra Examples with different types\n// Example: Primitive-Arrays\nclass SomeMapClass3 {\n  @prop({ type: () => [String] })\n  public lookup?: Map<string, string[]>;\n}\n\n// Example: SubDocuments\nclass Nested {\n  @prop()\n  public dummy?: string;\n}\nclass SomeMapClass3 {\n  @prop({ type: () => Nested, _id: false })\n  public lookup?: Map<string, Nested>;\n}\n\n// Example: SubDocument-Arrays (since 8.1.1)\nclass Nested {\n  @prop()\n  public dummy?: string;\n}\nclass SomeMapClass3 {\n  @prop({ type: () => [Nested], _id: false })\n  public lookup?: Map<string, Nested[]>;\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"type"})," can be Primitives, Primitive-Arrays, SubDocuments(Classes) and SubDocument(Class)-Arrays"]})}),"\n",(0,r.jsx)(n.h2,{id:"string-transform-options",children:"String Transform options"}),"\n",(0,r.jsx)(n.h3,{id:"lowercase",children:"lowercase"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set this to ",(0,r.jsx)(n.code,{children:"true"}),", if the value should always be transformed to be lowercased."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class LowerCased {\n  @prop({ lowercase: true })\n  public lowerCase: string; // "HELLO" -> "hello"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"uppercase",children:"uppercase"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set this to ",(0,r.jsx)(n.code,{children:"true"}),", if the value should always be transformed to be UPPERCASE. "]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class UpperCased {\n  @prop({ uppercase: true })\n  public upperCase: string; // "hello" -> "HELLO"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"trim",children:"trim"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"})]}),"\n",(0,r.jsxs)(n.p,{children:["Set this to ",(0,r.jsx)(n.code,{children:"true"}),", if the value should always be trimmed."]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Trimmed {\n  @prop({ trim: true })\n  public trim: string; // "   Trim me   " -> "Trim me"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"string-validation-options",children:"String Validation options"}),"\n",(0,r.jsx)(n.h3,{id:"maxlength",children:"maxlength"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsx)(n.p,{children:"Sets the maximum length the string can have."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class MaxLengthed {\n  @prop({ maxlength: 10 })\n  public maxlengthed?: string; // the string can only be 10 characters long\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"minlength",children:"minlength"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsx)(n.p,{children:"Sets the minimum length the string can have (must be above 0)."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class MinLengthed {\n  @prop({ minlength: 10 })\n  public minlengthed?: string; // the string must be at least 10 characters long\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"match",children:"match"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"RegExp"})]}),"\n",(0,r.jsx)(n.p,{children:"Sets a Regular Expression for the string must match."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class RegExpString {\n  @prop({ match: /^H/i })\n  public matched?: string;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"number-validation-options",children:"Number Validation options"}),"\n",(0,r.jsx)(n.h3,{id:"max",children:"max"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsx)(n.p,{children:"Sets the maximum value the number property can have."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Maxed {\n  @prop({ max: 10 })\n  public maxed?: number; // the value can be at most 10\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"min",children:"min"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"number"})]}),"\n",(0,r.jsx)(n.p,{children:"Sets the minimum value the number property can have."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class Mined {\n  @prop({ min: 0 })\n  public mined?: number; // the value must be at least 0\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"virtual-populate-options",children:"Virtual Populate Options"}),"\n",(0,r.jsxs)(n.p,{children:["Options for ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/virtuals#virtual-populate",children:"Virtual Populate"})]}),"\n",(0,r.jsx)(n.h3,{id:"virtual-populate-ref",children:"ref"}),"\n",(0,r.jsx)(n.p,{children:"Required: yes, if using virtual populate"}),"\n",(0,r.jsxs)(n.p,{children:["For Options and Typings, see normal ",(0,r.jsx)(n.a,{href:"#ref",children:(0,r.jsx)(n.code,{children:"ref"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"foreignfield",children:"foreignField"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"string | DynamicStringFunc<any>"}),(0,r.jsx)(n.br,{}),"\n","Required: yes, if using virtual populate"]}),"\n",(0,r.jsxs)(n.p,{children:["Set the field to look at in the remote document and be compared with the field set by ",(0,r.jsx)(n.a,{href:"#localfield",children:(0,r.jsx)(n.code,{children:"localField"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"localfield",children:"localField"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"string | DynamicStringFunc<any>"}),(0,r.jsx)(n.br,{}),"\n","Required: yes, if using virtual populate"]}),"\n",(0,r.jsxs)(n.p,{children:["Set the field to look at in the local document and be compared with the field set by ",(0,r.jsx)(n.a,{href:"#foreignfield",children:(0,r.jsx)(n.code,{children:"foreignField"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"justone",children:"justOne"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"}),(0,r.jsx)(n.br,{}),"\n","Conflicts with: ",(0,r.jsx)(n.a,{href:"#count",children:(0,r.jsx)(n.code,{children:"count"})})]}),"\n",(0,r.jsx)(n.p,{children:"Set whether the query should only return one document instead of a array of documents."}),"\n",(0,r.jsx)(n.h3,{id:"count",children:"count"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"boolean"}),(0,r.jsx)(n.br,{}),"\n","Conflicts with: ",(0,r.jsx)(n.a,{href:"#justone",children:(0,r.jsx)(n.code,{children:"justOne"})})]}),"\n",(0,r.jsx)(n.p,{children:"Set whether the query should return a count of found documents instead of the documents themself."}),"\n",(0,r.jsx)(n.h3,{id:"virtual-populate-options-option",children:"options"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"mongoose.QueryOptions"})]}),"\n",(0,r.jsx)(n.p,{children:"Set custom options to be used in the query for virtual populate."}),"\n",(0,r.jsx)(n.h3,{id:"virtual-populate-match",children:"match"}),"\n",(0,r.jsxs)(n.p,{children:["Accepts Type: ",(0,r.jsx)(n.code,{children:"object | (doc) => object"})]}),"\n",(0,r.jsx)(n.p,{children:"Set a custom matcher for virtual populate."}),"\n",(0,r.jsx)("a",{name:"whatisit"}),"\n",(0,r.jsx)(n.h2,{id:"proptype",children:"PropType"}),"\n",(0,r.jsxs)(n.p,{children:["This is an Enum to represent what the prop should be, this is in most cases automatically set. It can be overridden in the second parameter of ",(0,r.jsx)(n.code,{children:"@prop"})]}),"\n",(0,r.jsx)(n.p,{children:"Full Enum:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"enum PropType {\n  ARRAY,\n  MAP,\n  NONE // default for properties if no Map / Array is detected\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"For Examples, look at:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#single-options",children:"Single Options"})," - ",(0,r.jsx)(n.code,{children:"NONE"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#array-options",children:"Array Options"})," - ",(0,r.jsx)(n.code,{children:"ARRAY"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#map-options",children:"Map Options"})," - ",(0,r.jsx)(n.code,{children:"MAP"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"passthrough-class",children:"Passthrough Class"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["It is not recommended to use this class, it should always be another class if nesting, like ",(0,r.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/quick-start-guide#quick-overview-of-typegoose",children:"in the quick-start-guide"})," is wanted"]})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Passthrough"}),' class is, like the name implies, is to pass-through a schema definition directly, without "wrapping" it in a ',(0,r.jsx)(n.code,{children:"new Schema({})"})," explicitly."]}),"\n",(0,r.jsx)(n.h3,{id:"passthrough-nondirect",children:"Non-Direct"}),"\n",(0,r.jsxs)(n.p,{children:["Using the ",(0,r.jsx)(n.code,{children:"Passthrough"})," class this way will be from mongoose 6.0 onward the same as doing another class (see ",(0,r.jsx)(n.a,{href:"https://github.com/Automattic/mongoose/issues/7181",children:"Mongoose#7181"}),").",(0,r.jsx)(n.br,{}),"\n","Also see the ",(0,r.jsxs)(n.a,{href:"/typegoose/versions/beta/docs/guides/faq#do-all-classes-get-compiled-to-their-own-mongooseschema",children:["FAQ ",(0,r.jsx)(n.code,{children:'Do all Classes get compiled to their own "mongoose.Schema"?'})]}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["It should be noted that using this method no typegoose transformations or warnings will be applied to what is inside ",(0,r.jsx)(n.code,{children:"Passthrough.raw"})," (like ",(0,r.jsx)(n.code,{children:"type: () => Class"})," will not be translated, it will stay as-is)."]})}),"\n",(0,r.jsxs)(n.p,{children:["There is also a option to set the ",(0,r.jsx)(n.code,{children:"Passthrough"})," class to ",(0,r.jsx)(n.code,{children:"direct"})," mode (with the second parameter), this will mean that absolutely no typegoose process is applied (everything has to be done manually), see ",(0,r.jsx)(n.a,{href:"#passthrough-direct",children:"Passthrough-Class#Direct"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.NONE"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughNoDirect {\n  @prop()\n  public normalProp?: string;\n\n  @prop({ type: () => new Passthrough({ somePath: String }) })\n  public child?: { somePath: string };\n}\n\n// would be equal to\n\nnew mongoose.Schema({\n  normalProp: {\n    type: String\n  },\n  child: {\n    type: {\n      somePath: String\n    }\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.ARRAY"}),":"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This was not working before mongoose 6.0.9, see ",(0,r.jsx)(n.a,{href:"https://github.com/Automattic/mongoose/issues/10750",children:"issue #10750"}),"."]})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:['Using this way will throw a "Mixed" warning for property ',(0,r.jsx)(n.code,{children:"child"}),", because at the time where typegoose checks types is way before it being a proper Type."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughNoDirect {\n  @prop({ type: () => new Passthrough({ somePath: String }) })\n  public child?: [{ somePath: string }]\n}\n\n// would be equal to\nnew mongoose.Schema({\n  child: {\n    type: [{\n      somePath: String\n    }]\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.MAP"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughNoDirect {\n  @prop({ type: () => new Passthrough({ someProp: String }) })\n  public child?: Map<string, { someProp: string }>;\n}\n\n// would be equal to\nnew mongoose.Schema({\n  child: {\n    type: Map,\n    of: {\n      type: {\n        someProp: String\n      }\n    }\n  }\n})\n"})}),"\n",(0,r.jsx)(n.h3,{id:"passthrough-direct",children:"Direct"}),"\n",(0,r.jsxs)(n.p,{children:["The option ",(0,r.jsx)(n.code,{children:"direct"})," (second parameter to ",(0,r.jsx)(n.code,{children:"Passthrough"}),", default ",(0,r.jsx)(n.code,{children:"false"}),"), is used to set assigning the contents of ",(0,r.jsx)(n.code,{children:"raw"})," (first parameter to ",(0,r.jsx)(n.code,{children:"Passthrough"}),") directly, with no processing on the typegoose side or preceding ",(0,r.jsx)(n.code,{children:"type:"}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsxs)(n.p,{children:["With the option ",(0,r.jsx)(n.code,{children:"direct"})," set to ",(0,r.jsx)(n.code,{children:"true"}),", no other option will be applied (even when defined) (like defining ",(0,r.jsx)(n.code,{children:"required"}),", will have no effect)."]}),(0,r.jsxs)(n.p,{children:["The most obvious one being that no ",(0,r.jsx)(n.code,{children:"type:"})," will be in-front of what ",(0,r.jsx)(n.code,{children:"Passthrough"})," holds."]})]}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.NONE"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughWithDirect {\n  @prop({ type: () => new Passthrough({ somePath: String }, true) })\n  public child?: { somePath: string; };\n}\n\n// would be equal to\n\nnew mongoose.Schema({\n  child: {\n    somePath: String\n  }\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.ARRAY"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughWithDirect {\n  @prop({ type: () => new Passthrough([{ somePath: String }], true) })\n  public child?: [{ somePath: string; }];\n}\n\n// would be equal to\n\nnew mongoose.Schema({\n  child: [{ somePath: String }]\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Example for ",(0,r.jsx)(n.code,{children:"PropType.MAP"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"class PassthroughWithDirect {\n  @prop({ type: () => new Passthrough({ type: Map, of: { somePath: String } }, true) })\n  public child?: Map<string, { somePath: string }>;\n}\n\n// would be equal to\n\nnew mongoose.Schema({\n  child: {\n    type: Map,\n    of: {\n      somePath: String\n    }\n  }\n})\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);