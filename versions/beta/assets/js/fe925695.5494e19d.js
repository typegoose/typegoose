"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[8902],{2517:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>n,default:()=>y,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/advanced/array-types","title":"Array Types & Fields","description":"Array types & Fields","source":"@site/../docs/guides/advanced/array-types.md","sourceDirName":"guides/advanced","slug":"/guides/advanced/array-types","permalink":"/typegoose/versions/beta/docs/guides/advanced/array-types","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/advanced/array-types.md","tags":[],"version":"current","frontMatter":{"id":"array-types","title":"Array Types & Fields"},"sidebar":"guides","previous":{"title":"Custom Types","permalink":"/typegoose/versions/beta/docs/guides/advanced/custom-types"},"next":{"title":"Models with same name","permalink":"/typegoose/versions/beta/docs/guides/advanced/models-with-same-name"}}');var r=t(4848),a=t(8453);const i={id:"array-types",title:"Array Types & Fields"},n=void 0,d={},c=[{value:"Array types &amp; Fields",id:"array-types--fields",level:2},{value:"Why is the long type needed?",id:"why-is-the-long-type-needed",level:2},{value:"Why is the <code>type</code> option always required?",id:"why-is-the-type-option-always-required",level:2}];function l(e){const s={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"array-types--fields",children:"Array types & Fields"}),"\n",(0,r.jsxs)(s.p,{children:["It is much easier to declare the array field's type as ",(0,r.jsx)(s.code,{children:"type[]"})," instead of ",(0,r.jsx)(s.code,{children:"Array<type>"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["But in some cases, Typescript could give you a warning, when you would like to use   on the array field.\nTo avoid such behavior, you could always declare the array field via ",(0,r.jsx)(s.code,{children:"mongoose.Types.Array<type>"})," or ",(0,r.jsx)(s.code,{children:"mongoose.Schema.Types.Array<type>"})]}),"\n",(0,r.jsx)(s.p,{children:"Example:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ts",children:"class ModelClass {\n  // required field, with empty array by default.\n  @prop({ type: String, required: true, default: [] })\n  public field!: mongoose.Types.Array<string>;\n}\n"})}),"\n",(0,r.jsx)(s.h2,{id:"why-is-the-long-type-needed",children:"Why is the long type needed?"}),"\n",(0,r.jsxs)(s.p,{children:["Mainly, because mongoose documents and their arrays fields have their pre-build methods, which slightly differ from ",(0,r.jsx)(s.code,{children:"Array.method.prototype"}),". But at runtime, these methods already exist (because an array is always an mongoose array). So, using ",(0,r.jsx)(s.code,{children:"type[]"})," is just more convenient way to write a shorter type instead of the ",(0,r.jsx)(s.code,{children:"mongoose.Types"})," if the functions are not used."]}),"\n",(0,r.jsxs)(s.p,{children:["For more information you could look at ",(0,r.jsx)(s.a,{href:"https://github.com/typegoose/typegoose/issues/509",children:"GitHub issue #509"}),"."]}),"\n",(0,r.jsxs)(s.h2,{id:"why-is-the-type-option-always-required",children:["Why is the ",(0,r.jsx)(s.code,{children:"type"})," option always required?"]}),"\n",(0,r.jsxs)(s.p,{children:["Because ",(0,r.jsx)(s.a,{href:"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata",children:"Reflection"}),' currently does not give out detailed information, it only "dumbs down" the type to ',(0,r.jsx)(s.code,{children:"Array"}),", see ",(0,r.jsx)(s.a,{href:"https://github.com/typegoose/typegoose/issues/300",children:"typescript issue #300"})," for more."]})]})}function y(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>n});var o=t(6540);const r={},a=o.createContext(r);function i(e){const s=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function n(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:s},e.children)}}}]);