"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[6928],{1470:(e,n,t)=>{t.d(n,{A:()=>y});var o=t(6540),a=t(4164),s=t(3104),r=t(6347),i=t(205),l=t(7485),d=t(1682),c=t(679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:o,default:a}}=e;return{value:n,label:t,attributes:o,default:a}}))}(t);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=m(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=t.find((e=>e.default))??t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[d,u]=p({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,c.Dv)(t);return[a,(0,o.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),b=(()=>{const e=d??g;return h({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{b&&l(b)}),[b]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var f=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function A(e){let{className:n,block:t,selectedValue:o,selectValue:r,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,t=l.indexOf(n),a=i[t].value;a!==o&&(d(n),r(a))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:c,...s,className:(0,a.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":o===n}),children:t??n},n)}))})}function M(e){let{lazy:n,children:t,selectedValue:s}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===s));return e?(0,o.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function C(e){const n=g(e);return(0,x.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,x.jsx)(A,{...n,...e}),(0,x.jsx)(M,{...n,...e})]})}function y(e){const n=(0,f.A)();return(0,x.jsx)(C,{...e,children:u(e.children)},String(n))}},7040:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"guides/advanced/non-nested-discriminators","title":"Non-Nested Discriminators","description":"Use-Case","source":"@site/../docs/guides/advanced/non-nested-discriminators.mdx","sourceDirName":"guides/advanced","slug":"/guides/advanced/non-nested-discriminators","permalink":"/typegoose/versions/beta/docs/guides/advanced/non-nested-discriminators","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/advanced/non-nested-discriminators.mdx","tags":[],"version":"current","frontMatter":{"id":"non-nested-discriminators","title":"Non-Nested Discriminators"},"sidebar":"guides","previous":{"title":"Using ObjectId Type","permalink":"/typegoose/versions/beta/docs/guides/advanced/using-objectid-type"},"next":{"title":"Nested Discriminators","permalink":"/typegoose/versions/beta/docs/guides/advanced/nested-discriminators"}}');var a=t(4848),s=t(8453),r=t(1470),i=t(9365);const l={id:"non-nested-discriminators",title:"Non-Nested Discriminators"},d=void 0,c={},u=[{value:"Use-Case",id:"use-case",level:2},{value:"First thought",id:"first-thought",level:2},{value:"Fixing it with Discriminators",id:"fixing-it-with-discriminators",level:2},{value:"Query with Shared Parent Model",id:"query-with-shared-parent-model",level:2},{value:"Extras",id:"extras",level:2},{value:"Extra Notes",id:"extra-notes",level:2},{value:"<code>strictQuery</code>",id:"strictquery",level:3}];function m(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"use-case",children:"Use-Case"}),"\n",(0,a.jsxs)(n.p,{children:["If you don't know an use case for this, consider the following:",(0,a.jsx)(n.br,{}),"\n","A Veterinarian that wants to store information about the current patients in their care, how would it be done in mongoose / typegoose?"]}),"\n",(0,a.jsx)(n.h2,{id:"first-thought",children:"First thought"}),"\n",(0,a.jsx)(n.p,{children:"At first you might think to do the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// to have an shared collection\n@modelOptions({ schemaOptions: { collection: "animal" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getModelForClass(Dog);\nconst CatModel = getModelForClass(Cat);\nconst ParrotModel = getModelForClass(Parrot);\n'})}),"\n",(0,a.jsx)(n.p,{children:"And then in some querying code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'await CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its a "findOne" to lower the example code\nconst found = await ParrotModel.findOne({}).exec();\n\n// this will "find" should log one of the 2 created above\nconsole.log("found", found);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Which is obviously not what is wanted, there would be ways to test for what document is what, but there is an easier way: Discriminators."}),"\n",(0,a.jsx)(n.h2,{id:"fixing-it-with-discriminators",children:"Fixing it with Discriminators"}),"\n",(0,a.jsxs)(n.p,{children:["The code from ",(0,a.jsx)(n.a,{href:"#first-thought",children:"First thought"})," is actually not so far off of what discriminators will need:"]}),"\n",(0,a.jsxs)(r.A,{groupId:"diff-full",children:[(0,a.jsx)(i.A,{value:"diff",label:"Difference",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:"const AnimalModel = getModelForClass(Animal);\n- const DogModel = getModelForClass(Dog);\n- const CatModel = getModelForClass(Cat);\n- const ParrotModel = getModelForClass(Parrot);\n+ const DogModel = getDiscriminatorModelForClass(AnimalModel, Dog);\n+ const CatModel = getDiscriminatorModelForClass(AnimalModel, Cat);\n+ const ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot);\n"})})}),(0,a.jsx)(i.A,{value:"fullcode",label:"Full Code",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'@modelOptions({ schemaOptions: { collection: "animal" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\n// difference is below here\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot);\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"And then the same querying code:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'await CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an "findOne" to lower the example code\nconst found = await ParrotModel.findOne({}).exec();\n\nconsole.log("found", found);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["and this time it will log ",(0,a.jsx)(n.code,{children:"null"}),", because there is no ",(0,a.jsx)(n.code,{children:"Parrot"})," document inside the collection."]}),"\n",(0,a.jsxs)(n.p,{children:['You might ask "how does this work?", well, it is easy: mongoose will by default use the hidden property ',(0,a.jsx)(n.code,{children:"__t"})," to differentiate between registered models from the shared parent, and the default value for the ",(0,a.jsx)(n.code,{children:"__t"})," property is the model name. (",(0,a.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#customname",children:"Look here for more on how typegoose generates an model name"}),")"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The property ",(0,a.jsx)(n.code,{children:"__t"})," can be changed to something different, see ",(0,a.jsx)(n.a,{href:"#extras",children:"Extras"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"query-with-shared-parent-model",children:"Query with Shared Parent Model"}),"\n",(0,a.jsx)(n.p,{children:"When using discriminators, it is also possible to use the shared parent to query for documents:"}),"\n",(0,a.jsxs)(r.A,{groupId:"diff-full",children:[(0,a.jsx)(i.A,{value:"diff",label:"Difference",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:'await CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an "findOne" to lower the example code\n- const found = await ParrotModel.findOne({}).exec();\n+ const found = await AnimalModel.findOne({}).exec();\n\n\nconsole.log("found", found);\n'})})}),(0,a.jsx)(i.A,{value:"fullcode",label:"Full Code",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'await CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an "findOne" to lower the example code\nconst found = await AnimalModel.findOne({}).exec();\n\nconsole.log("found", found);\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["This should find one of the 2 created documents, with full properties at runtime, but at compile time (in the editor), it is still shown as ",(0,a.jsx)(n.code,{children:"Animal"}),".",(0,a.jsx)(n.br,{}),"\n","This can be solved by using custom type guards:"]}),"\n",(0,a.jsx)(n.p,{children:"Classes & Models:"}),"\n",(0,a.jsxs)(r.A,{groupId:"diff-full",children:[(0,a.jsx)(i.A,{value:"diff",label:"Difference",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:'+ enum Names {\n+   DOG = "DOG",\n+   CAT = "CAT",\n+   PARROT = "PARROT",\n+ }\n\n\n@modelOptions({ schemaOptions: { collection: "animal" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\n- const DogModel = getDiscriminatorModelForClass(AnimalModel, Dog);\n- const CatModel = getDiscriminatorModelForClass(AnimalModel, Cat);\n- const ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot);\n+ const DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\n+ const CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\n+ const ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n'})})}),(0,a.jsx)(i.A,{value:"fullcode",label:"Full Code",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// an enum to make it easier to access the names for the typeguard\nenum Names {\n  DOG = "DOG",\n  CAT = "CAT",\n  PARROT = "PARROT",\n}\n\n@modelOptions({ schemaOptions: { collection: "animal" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n'})})})]}),"\n",(0,a.jsx)(n.p,{children:"Query Code:"}),"\n",(0,a.jsxs)(r.A,{groupId:"diff-full",children:[(0,a.jsx)(i.A,{value:"diff",label:"Difference",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:'+ function checkForClass<T extends Animal>(doc: mongoose.Document & KeyStringAny, name: string): doc is DocumentType<T> {\n+   return doc?.__t === name;\n+ }\n\n\nawait CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an "findOne" to lower the example code\n- const found = await AnimalModel.findOne({}).exec();\n+ const found = await AnimalModel.findOne({ patientNumber: 0 }).orFail().exec();\n\n\n+ if (checkForClass<Cat>(found, Names.CAT)) {\n+   console.log("runtime Cat", found.nameTag);\n+ }\nconsole.log("found", found);\n'})})}),(0,a.jsx)(i.A,{value:"fullcode",label:"Full Code",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'function checkForClass<T extends Animal>(doc: mongoose.Document & KeyStringAny, name: string): doc is DocumentType<T> {\n  return doc?.__t === name;\n}\n\nawait CatModel.create({ patientNumber: 0, nameTag: "Catty-1" });\nawait DogModel.create({ patientNumber: 1, cageNumber: 1 });\n\n// for this example its an "findOne" to lower the example code\nconst found = await AnimalModel.findOne({ patientNumber: 0 }).orFail().exec();\n\nif (checkForClass<Cat>(found, Names.CAT)) {\n  console.log("runtime Cat", found.nameTag);\n}\nconsole.log("found", found);\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["this code should now log ",(0,a.jsx)(n.code,{children:"runtime Cat Catty-1"})," and the full document and types should also work inside the if-block."]}),"\n",(0,a.jsx)(n.h2,{id:"extras",children:"Extras"}),"\n",(0,a.jsxs)(n.p,{children:["The value of the ",(0,a.jsx)(n.code,{children:"discriminatorKey"})," (default: ",(0,a.jsx)(n.code,{children:"__t"}),") can be changed, by defining the property on the class (/ schema) and pointing ",(0,a.jsx)(n.code,{children:"discriminatorKey"})," to that property."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsxs)(r.A,{groupId:"diff-full",children:[(0,a.jsx)(i.A,{value:"diff",label:"Difference",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-diff",children:'enum Names {\n  DOG = "DOG",\n  CAT = "CAT",\n  PARROT = "PARROT",\n}\n\n- @modelOptions({ schemaOptions: { collection: "animal" } })\n+ @modelOptions({ schemaOptions: { collection: "animal", discriminatorKey: "customKey" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n\n+   @prop({ required: true })\n+   public customKey!: string; // its recommended to only use "string" or "number"\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n'})})}),(0,a.jsx)(i.A,{value:"fullcode",label:"Full Code",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// an enum to make it easier to access the names for the typeguard\nenum Names {\n  DOG = "DOG",\n  CAT = "CAT",\n  PARROT = "PARROT",\n}\n\n@modelOptions({ schemaOptions: { collection: "animal", discriminatorKey: "customKey" } })\nclass Animal {\n  @prop({ required: true, unique: true })\n  public patientNumber!: number;\n\n  // options "enum" & "default" can also be specified, but don\'t have much effect\n  // the property set in "discriminatorKey" does not actually need to be defined, but its for types like usage in an typeguard\n  @prop({ required: true })\n  public customKey!: string; // its recommended to only use "string" or "number"\n}\n\nclass Dog extends Animal {\n  @prop()\n  public cageNumber!: number;\n}\n\nclass Cat extends Animal {\n  @prop()\n  public nameTag!: string;\n}\n\nclass Parrot extends Animal {\n  @prop()\n  public commonMessage?: string;\n}\n\nconst AnimalModel = getModelForClass(Animal);\nconst DogModel = getDiscriminatorModelForClass(AnimalModel, Dog, Names.DOG);\nconst CatModel = getDiscriminatorModelForClass(AnimalModel, Cat, Names.CAT);\nconst ParrotModel = getDiscriminatorModelForClass(AnimalModel, Parrot, Names.PARROT);\n'})})})]}),"\n",(0,a.jsxs)(n.p,{children:["And so instead of the model name (example: ",(0,a.jsx)(n.code,{children:"Cat"}),"), it will be stored as ",(0,a.jsx)(n.code,{children:"customCat"})," inside property ",(0,a.jsx)(n.code,{children:"customKey"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"extra-notes",children:"Extra Notes"}),"\n",(0,a.jsx)(n.h3,{id:"strictquery",children:(0,a.jsx)(n.code,{children:"strictQuery"})}),"\n",(0,a.jsxs)(n.p,{children:["In mongoose 6.x, the option ",(0,a.jsx)(n.code,{children:"strictQuery"})," is ",(0,a.jsx)(n.code,{children:"true"})," by default, basically meaning that it will strip all properties from a query that are not on the schema the query is executed on."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://mongoosejs.com/docs/migrating_to_6.html#strictquery-is-removed-and-replaced-by-strict",children:"mongoose 6.0 Migration guide"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"// The following will result in a empty array\nawait AnimalModel.find({ cageNumber: 10 });\n\n// use the following if it is required to be used this way\nawait AnimalModel.find({ cageNumber: 10 }, null, { strictQuery: false })\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(6540);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var o=t(4164);const a={tabItem:"tabItem_Ymn6"};var s=t(4848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,r),hidden:t,children:n})}}}]);