"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1169],{1206:(s,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"api/functions/assertions","title":"assertion","description":"assertion","source":"@site/../docs/api/functions/assertions.md","sourceDirName":"api/functions","slug":"/api/functions/assertions","permalink":"/typegoose/versions/beta/docs/api/functions/assertions","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/functions/assertions.md","tags":[],"version":"current","frontMatter":{"id":"assertions","title":"assertion"}}');var o=n(4848),i=n(8453);const r={id:"assertions",title:"assertion"},a=void 0,c={},l=[{value:"assertion",id:"assertion",level:2},{value:"assertionIsClass",id:"assertionisclass",level:2}];function d(s){const e={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...s.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"assertion",children:"assertion"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"assertion(cond, error?)"})," is a custom assertion function that utilizes ",(0,o.jsxs)(e.a,{href:"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#assertion-functions",children:[(0,o.jsx)(e.code,{children:"asserts"})," from typescript 3.7"]}),".",(0,o.jsx)(e.br,{}),"\n","-> This function is mainly build for internal use, but can also be used outside of typegoose"]}),"\n",(0,o.jsx)(e.p,{children:"Example:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:'let someMultiValue: string | number | boolean = \'Hello\';\n// "someMultiValue"\'s type is currently "string | number | boolean", even with a string defined\nassertion(typeof someMultiValue === \'string\');\n// now the type of "someMultiValue" is just "string" and an error is thrown if it is not a string\n'})}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["The function is named ",(0,o.jsx)(e.code,{children:"assertion"})," and not ",(0,o.jsx)(e.code,{children:"assert"}),", so do not confuse it and the types of testing frameworks and from NodeJS itself."]})}),"\n",(0,o.jsx)(e.h2,{id:"assertionisclass",children:"assertionIsClass"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"assertionIsClass(class)"})," is like ",(0,o.jsx)(e.a,{href:"#assertion",children:"assertion"}),", but with a set condition and error pre-defined.",(0,o.jsx)(e.br,{}),"\n","-> this function is mainly built for internal use, but can also be used outside of typegoose"]})]})}function u(s={}){const{wrapper:e}={...(0,i.R)(),...s.components};return e?(0,o.jsx)(e,{...s,children:(0,o.jsx)(d,{...s})}):d(s)}},8453:(s,e,n)=>{n.d(e,{R:()=>r,x:()=>a});var t=n(6540);const o={},i=t.createContext(o);function r(s){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof s?s(e):{...e,...s}}),[e,s])}function a(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(o):s.components||o:r(s.components),t.createElement(i.Provider,{value:e},s.children)}}}]);