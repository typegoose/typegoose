"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[2022],{8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>a});var t=s(6540);const i={},o=t.createContext(i);function d(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(o.Provider,{value:n},e.children)}},9361:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"guides/advanced/change-id-type","title":"Change _id Type","description":"You can easily change the type of the _id field by doing:","source":"@site/../docs/guides/advanced/changeIDType.md","sourceDirName":"guides/advanced","slug":"/guides/advanced/change-id-type","permalink":"/typegoose/versions/beta/docs/guides/advanced/change-id-type","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/advanced/changeIDType.md","tags":[],"version":"current","frontMatter":{"id":"change-id-type","title":"Change _id Type"},"sidebar":"guides","previous":{"title":"Reference other Classes","permalink":"/typegoose/versions/beta/docs/guides/advanced/reference-other-classes"},"next":{"title":"Using ObjectId Type","permalink":"/typegoose/versions/beta/docs/guides/advanced/using-objectid-type"}}');var i=s(4848),o=s(8453);const d={id:"change-id-type",title:"Change _id Type"},a=void 0,c={},r=[{value:"With the Base Interface",id:"with-the-base-interface",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["You can easily change the type of the ",(0,i.jsx)(n.code,{children:"_id"})," field by doing:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class SomeChangedID {\n  @prop()\n  public _id!: string; // change the type of _id to string\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The example above sets the ",(0,i.jsx)(n.code,{children:"_id"})," type to be a string, but does not provide a ",(0,i.jsx)(n.code,{children:"default"})," function, so the ",(0,i.jsx)(n.code,{children:"_id"})," property needs to be always set manually before saving / inserting a document, use the ",(0,i.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#default",children:(0,i.jsx)(n.code,{children:"default"})})," option to set a function to generate a new id automatically, be careful to not forget that using ",(0,i.jsx)(n.code,{children:"default: fn()"})," will only call the function ",(0,i.jsx)(n.em,{children:"once at scope time"})," instead of ",(0,i.jsx)(n.em,{children:"everytime a new document is created"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"class SomeUUIDv4 {\n  @prop({ required: true, default: () => uuidv4() })\n  public _id!: string;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"_id"})," property can also be disabled for subdocuments, with the ",(0,i.jsxs)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#_id",children:["prop option ",(0,i.jsx)(n.code,{children:"_id: false"})]})," for the field in the class that uses the subdocument, or the ",(0,i.jsxs)(n.a,{href:"https://mongoosejs.com/docs/guide.html#_id",children:["schema option ",(0,i.jsx)(n.code,{children:"_id"})]}),", but note that the schema-option does not disable ",(0,i.jsx)(n.code,{children:"_id"})," if it is not a sub-document."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"@modelOptions({ schemaOptions: { _id: false } }) // with the schema option\nclass WithNoId {\n  @prop()\n  public someValue: string;\n}\n\nclass SomeChangedID {\n  @prop({ type: WithNoId, _id: false }) // or with the prop-option\n  public someField: WithNoId[];\n}\n"})}),"\n",(0,i.jsx)("div",{id:"with-the-base-class"}),"\n",(0,i.jsx)(n.h2,{id:"with-the-base-interface",children:"With the Base Interface"}),"\n",(0,i.jsxs)(n.p,{children:["There is also a ",(0,i.jsxs)(n.a,{href:"/typegoose/versions/beta/docs/guides/default-classes#base",children:[(0,i.jsx)(n.code,{children:"Base"})," interface"]})," typegoose provides which includes ",(0,i.jsx)(n.code,{children:"_id"})," and ",(0,i.jsx)(n.code,{children:"id"}),", it can be used as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'class Something implements Base<string> {\n  @prop()\n  public _id: string;\n  // .. other properties "Base" might provide and needs to be implemented\n}\n\n// The Base interface can also be used together with other classes and other interfaces\nclass Something extends TimeStamps implements Base<string> {\n  @prop()\n  public _id: string;\n  // .. other properties "Base" might provide and needs to be implemented\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{title:"Restriction",type:"info",children:(0,i.jsxs)(n.p,{children:["This method (extending ",(0,i.jsx)(n.code,{children:"Base"}),") can only be used with types that are in ",(0,i.jsx)(n.code,{children:"RefType"})," (all of ",(0,i.jsx)(n.code,{children:"mongoose.Schema.Types"})," should work except ",(0,i.jsx)(n.code,{children:"Array"}),", ",(0,i.jsx)(n.code,{children:"Mixed"}),", ",(0,i.jsx)(n.code,{children:"Boolean"}),")."]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);