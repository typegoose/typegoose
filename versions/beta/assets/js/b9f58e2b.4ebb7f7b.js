"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[3074],{7572:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/functions/get-discriminator-model-for-class","title":"getDiscriminatorModelForClass","description":"Overload 1","source":"@site/../docs/api/functions/getDiscriminatorModelForClass.md","sourceDirName":"api/functions","slug":"/api/functions/get-discriminator-model-for-class","permalink":"/typegoose/versions/beta/docs/api/functions/get-discriminator-model-for-class","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/functions/getDiscriminatorModelForClass.md","tags":[],"version":"current","frontMatter":{"id":"get-discriminator-model-for-class","title":"getDiscriminatorModelForClass"},"sidebar":"docs","previous":{"title":"buildSchema","permalink":"/typegoose/versions/beta/docs/api/functions/build-schema"},"next":{"title":"addModelToTypegoose","permalink":"/typegoose/versions/beta/docs/api/functions/add-model-to-typegoose"}}');var i=s(4848),r=s(8453);const l={id:"get-discriminator-model-for-class",title:"getDiscriminatorModelForClass"},d=void 0,o={},c=[{value:"Overload 1",id:"overload-1",level:3},{value:"Overload 2",id:"overload-2",level:3},{value:"Overload 3",id:"overload-3",level:3},{value:"Description",id:"description",level:3},{value:"Example",id:"example",level:2}];function a(e){const t={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"overload-1",children:"Overload 1"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Typings:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  options?: IModelOptions\n): ReturnModelType<U, QueryHelpers>;\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"from"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"mongoose.Model"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Model to register a discriminator on"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"cl"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"U"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Class to build into a Model"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"options"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"IModelOptions"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Overwrite some Model options, only property ",(0,i.jsx)(t.code,{children:"schemaOptions"})," is merged with the existing options"]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"overload-2",children:"Overload 2"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Typings:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  value?: string\n): ReturnModelType<U, QueryHelpers>;\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"from"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"mongoose.Model"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Model to register a discriminator on"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"cl"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"U"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Class to build into a Model"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"value"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"IModelOptions"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Overwrite the discrimiantor value to register by"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"overload-3",children:"Overload 3"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Typings:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"function getDiscriminatorModelForClass<U extends AnyParamConstructor<any>, QueryHelpers = BeAnObject>(\n  from: mongoose.Model<any, any>,\n  cl: U,\n  value?: string,\n  options?: IModelOptions\n): ReturnModelType<U, QueryHelpers>;\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Name"}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"from"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"mongoose.Model"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Model to register a discriminator on"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"cl"})," ",(0,i.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"U"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"The Class to build into a Model"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"value"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"IModelOptions"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Overwrite the discrimiantor value to register by"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"options"})}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:(0,i.jsx)(t.code,{children:"IModelOptions"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Overwrite some Model options, only property ",(0,i.jsx)(t.code,{children:"schemaOptions"})," is merged with the existing options"]})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"getDiscriminatorModelForClass"})," is used to compile a given Class (",(0,i.jsx)(t.code,{children:"cl"}),") into a Model and register it as a discriminator on a given Model (",(0,i.jsx)(t.code,{children:"from"}),")."]}),"\n",(0,i.jsxs)(t.p,{children:["Option ",(0,i.jsx)(t.code,{children:"value"})," is to overwrite the key the class is registered on as a discriminator, by default it is the generated model name, but can be overwritten with any string, recommended is to use a ",(0,i.jsxs)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/enums.html#string-enums",children:["string-",(0,i.jsx)(t.code,{children:"enum"})]})," to keep track of names."]}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["Note that ",(0,i.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#existingconnection",children:(0,i.jsx)(t.code,{children:"existingConnection"})})," and ",(0,i.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#existingmongoose",children:(0,i.jsx)(t.code,{children:"existingMongoose"})})," will not be used and instead will be registered on the ",(0,i.jsx)(t.code,{children:"from"})," model's settings.",(0,i.jsx)(t.br,{}),"\n","See ",(0,i.jsx)(t.a,{href:"/typegoose/versions/beta/docs/guides/error-warning-details#property-was-defined-differently-on-base-and-discriminator-w002",children:(0,i.jsx)(t.code,{children:"Warning W002"})}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"// The Base Class\nclass Event {\n  @prop({ required: true })\n  public name!: string;\n}\n\n// A Discriminator Class Variant\nclass ClickEvent extends Event {\n  @prop({ required: true, default: 0 })\n  public timesClicked!: number;\n}\n\nconst EventModel = getModelForClass(Event);\nconst ClickEventModel = getDiscriminatorModelForClass(EventModel, ClickEvent);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>d});var n=s(6540);const i={},r=n.createContext(i);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);