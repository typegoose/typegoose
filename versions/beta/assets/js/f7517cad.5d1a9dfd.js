"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[9025],{899:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"api/decorators/hooks","title":"@pre & @post","description":"@pre","source":"@site/../docs/api/decorators/hooks.md","sourceDirName":"api/decorators","slug":"/api/decorators/hooks","permalink":"/typegoose/versions/beta/docs/api/decorators/hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/api/decorators/hooks.md","tags":[],"version":"current","frontMatter":{"id":"hooks","title":"@pre & @post"},"sidebar":"docs","previous":{"title":"@modelOptions","permalink":"/typegoose/versions/beta/docs/api/decorators/model-options"},"next":{"title":"@index","permalink":"/typegoose/versions/beta/docs/api/decorators/indexes"}}');var s=t(4848),r=t(8453);const d={id:"hooks",title:"@pre & @post"},i=void 0,c={},a=[{value:"@pre",id:"pre",level:2},{value:"Example",id:"pre-example",level:2},{value:"@post",id:"post",level:2},{value:"Example",id:"post-example",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"pre",children:"@pre"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Typings:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface PreHooks {\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: 'save',\n    fn: PreSaveMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PreMiddlewareFunction<T>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n  pre<T extends Aggregate<any>>(method: 'aggregate' | RegExp, fn: PreMiddlewareFunction<T>, options?: SchemaPreOptions): ClassDecorator;\n  pre<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: (this: T, next: (err?: CallbackError) => void, docs: any | Array<any>) => void | Promise<void>,\n    options?: SchemaPreOptions\n  ): ClassDecorator;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"method"})," ",(0,s.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"string | RegExp | string[]"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["The Method(s) to add the ",(0,s.jsx)(n.code,{children:"fn"})," to"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"fn"})," ",(0,s.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"Func"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["The Function to run for the Method(s) set in ",(0,s.jsx)(n.code,{children:"method"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"options"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre",children:(0,s.jsx)(n.code,{children:"mongoose.SchemaPreOptions"})})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Options to set when to run the hook"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@pre"})," is used to set Document & Query pre hooks, works like ",(0,s.jsx)(n.code,{children:"schema.pre"})," only difference is the switched ",(0,s.jsx)(n.code,{children:"options"})," and ",(0,s.jsx)(n.code,{children:"method"}),"(",(0,s.jsx)(n.code,{children:"fn"}),") parameter positions."]}),"\n",(0,s.jsxs)(n.p,{children:["For parameter ",(0,s.jsx)(n.code,{children:"options"}),", look at the ",(0,s.jsxs)(n.a,{href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-pre",children:["mongoose for ",(0,s.jsx)(n.code,{children:"schema.pre"})]})," or ",(0,s.jsx)(n.a,{href:"https://mongoosejs.com/docs/middleware.html#naming",children:"mongoose Middleware section Naming Conflicts"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Arrow Functions cannot be used here, because the binding of ",(0,s.jsx)(n.code,{children:"this"})," is required to get & modify the Document / Query / Aggregate."]})}),"\n",(0,s.jsx)(n.h2,{id:"pre-example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"@pre<Car>('save', function () {\n  if (this.model === 'Tesla') {\n    this.isFast = true;\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop()\n  public isFast?: boolean;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"post",children:"@post"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Typings:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface PostHooks {\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, QueryResultType<T>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: PostMiddlewareFunction<T, Array<AggregateExtract<T>>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: PostMiddlewareFunction<T, T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n\n  // error handling post hooks\n  post<S extends object | Query<any, any>, T = S extends Query<any, any> ? S : Query<DocumentType<S>, DocumentType<S>>>(\n    method: MongooseQueryMiddleware | MongooseQueryMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends object | HydratedDocument<any, any>, T = S extends Document ? S : HydratedDocument<DocumentType<S>, any>>(\n    method: MongooseDocumentMiddleware | MongooseDocumentMiddleware[] | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<T extends Aggregate<any>>(\n    method: 'aggregate' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T, Array<any>>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n  post<S extends AnyParamConstructor<any> | Model<any>, T = S extends Model<any> ? S : ReturnModelType<S>>(\n    method: 'insertMany' | RegExp,\n    fn: ErrorHandlingMiddlewareFunction<T>,\n    options?: SchemaPostOptions\n  ): ClassDecorator;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Name"}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"method"})," ",(0,s.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"string | RegExp | string[]"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["The Method(s) to add the ",(0,s.jsx)(n.code,{children:"fn"})," to"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"fn"})," ",(0,s.jsx)("span",{class:"badge badge--secondary",children:"Required"})]}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.code,{children:"Func"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["The Function to run for the Method(s) set in ",(0,s.jsx)(n.code,{children:"method"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"options"})}),(0,s.jsx)(n.td,{style:{textAlign:"center"},children:(0,s.jsx)(n.a,{href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post",children:(0,s.jsx)(n.code,{children:"mongoose.SchemaPreOptions"})})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Options to set when to run the hook"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@post"})," is used to set Document & Query pre hooks, works like ",(0,s.jsx)(n.code,{children:"schema.post"})," only difference is the switched ",(0,s.jsx)(n.code,{children:"options"})," and ",(0,s.jsx)(n.code,{children:"method"}),"(",(0,s.jsx)(n.code,{children:"fn"}),") parameter positions."]}),"\n",(0,s.jsxs)(n.p,{children:["For parameter ",(0,s.jsx)(n.code,{children:"options"}),", look at the ",(0,s.jsxs)(n.a,{href:"https://mongoosejs.com/docs/api/schema.html#schema_Schema-post",children:["mongoose for ",(0,s.jsx)(n.code,{children:"schema.post"})]})," or ",(0,s.jsx)(n.a,{href:"https://mongoosejs.com/docs/middleware.html#naming",children:"mongoose Middleware section Naming Conflicts"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Arrow Functions cannot be used here, because the binding of ",(0,s.jsx)(n.code,{children:"this"})," is required to get & modify the Document / Query / Aggregate."]})}),"\n",(0,s.jsx)(n.h2,{id:"post-example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"@post<Car>('save', (car) => {\n  if (car.topSpeedInKmH > 300) {\n    console.log(car.model, 'is fast!');\n  }\n})\nclass Car {\n  @prop({ required: true })\n  public model!: string;\n\n  @prop({ required: true })\n  public topSpeedInKmH!: number;\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var o=t(6540);const s={},r=o.createContext(s);function d(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);