"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[2807],{574:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guides/use-without-emitDecoratorMetadata","title":"Use Without \\"emitDecoratorMetadata\\"","description":"Typegoose can be used without the option emitDecoratorMetadata, but it is generally recommended to enable it for auto-inferring from the typescript type.","source":"@site/../docs/guides/use-without-emitDecoratorMetadata.md","sourceDirName":"guides","slug":"/guides/use-without-emitDecoratorMetadata","permalink":"/typegoose/versions/beta/docs/guides/use-without-emitDecoratorMetadata","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/use-without-emitDecoratorMetadata.md","tags":[],"version":"current","frontMatter":{"id":"use-without-emitDecoratorMetadata","title":"Use Without \\"emitDecoratorMetadata\\""},"sidebar":"guides","previous":{"title":"All Decorators","permalink":"/typegoose/versions/beta/docs/guides/all-decorators"},"next":{"title":"Motivation","permalink":"/typegoose/versions/beta/docs/guides/motivation"}}');var i=o(4848),n=o(8453);const a={id:"use-without-emitDecoratorMetadata",title:'Use Without "emitDecoratorMetadata"'},s=void 0,d={},c=[{value:"Advantages to &quot;emitDecoratorMetadata&quot;",id:"advantages-to-emitdecoratormetadata",level:2},{value:"References",id:"references",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Typegoose can be used without the option ",(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata",children:(0,i.jsx)(t.code,{children:"emitDecoratorMetadata"})}),", but it is generally recommended to enable it for auto-inferring from the typescript type."]}),"\n",(0,i.jsx)(t.h2,{id:"advantages-to-emitdecoratormetadata",children:'Advantages to "emitDecoratorMetadata"'}),"\n",(0,i.jsxs)(t.p,{children:["When using ",(0,i.jsx)(t.code,{children:"emitDecoratorMetadata"}),", it is not needed to be explicit about ",(0,i.jsx)(t.em,{children:"everything"}),', like the following example would simply "compile" into the appropriate types.']}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Some properties (like Arrays & Maps) need to be always explicit, see ",(0,i.jsxs)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#array-options",children:[(0,i.jsx)(t.code,{children:"@prop"})," Array Options"]}),"."]})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'class Kitten {\n  @prop({ required: true }) // Not needed to be explicit that this property is a "String"\n  public name!: string;\n\n  @prop({ type: () => [String], required: true })\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true })\n  public favoritePlacePriority!: Map<string, number>;\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["But when not using ",(0,i.jsx)(t.code,{children:"emitDecoratorMetadata"}),", every property needs to be explicitly defined:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'class Kitten {\n  @prop({ type: () => String, required: true }) // Needs to be explicitly defined, because "emitDecoratorMetadata" is not enabled\n  public name!: string;\n\n  @prop({ type: () => [String], required: true }, PropType.ARRAY)\n  public friendNames!: string[];\n\n  @prop({ type: () => Number, required: true }, PropType.MAP)\n  public favoritePlacePriority!: Map<string, number>;\n}\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["Since typegoose 12.11.0, ",(0,i.jsx)(t.code,{children:"type: [TYPE]"})," will also infer ",(0,i.jsx)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#proptype",children:(0,i.jsx)(t.code,{children:"PropType.ARRAY"})}),", unless manually specified."]})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsxs)(t.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#proptype",children:["Look here for what ",(0,i.jsx)(t.code,{children:"PropType"})," is"]})}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsxs)(t.a,{href:"https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata",children:["tsconfig option ",(0,i.jsx)(t.code,{children:"emitDecoratorMetadata"})]})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata",children:"Typescript explanation to decorators and Reflection"})}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>s});var r=o(6540);const i={},n=r.createContext(i);function a(e){const t=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);