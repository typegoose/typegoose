"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[7026],{466:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/faq","title":"FAQ","description":"Repository","source":"@site/../docs/guides/faq.md","sourceDirName":"guides","slug":"/guides/faq","permalink":"/typegoose/versions/beta/docs/guides/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/faq.md","tags":[],"version":"current","frontMatter":{"id":"faq","title":"FAQ"},"sidebar":"guides","previous":{"title":"Quick Start Guide","permalink":"/typegoose/versions/beta/docs/guides/quick-start-guide"},"next":{"title":"Known Issues","permalink":"/typegoose/versions/beta/docs/guides/known-issues"}}');var s=n(4848),i=n(8453);const a={id:"faq",title:"FAQ"},d=void 0,r={},l=[{value:"Repository",id:"repository",level:2},{value:"What happened to the original author?",id:"what-happened-to-the-original-author",level:3},{value:"Is this Project still active?",id:"is-this-project-still-active",level:3},{value:"Why is the package now released in another package?",id:"why-is-the-package-now-released-in-another-package",level:3},{value:"Why <code>@typegoose/typegoose</code>",id:"why-typegoosetypegoose",level:3},{value:"Functional",id:"functional",level:2},{value:"Why does <code>new Model({})</code> not have types?",id:"why-does-new-model-not-have-types",level:3},{value:"Do all Classes get compiled to their own <code>mongoose.Schema</code>?",id:"do-all-classes-get-compiled-to-their-own-mongooseschema",level:3},{value:"I need to set <code>_id</code> manually, how to do it properly?",id:"i-need-to-set-_id-manually-how-to-do-it-properly",level:3},{value:"Edge Cases",id:"edge-cases",level:2},{value:"I want to the return document with property <code>id</code> instead of <code>_id</code>",id:"i-want-to-the-return-document-with-property-id-instead-of-_id",level:3},{value:"Why is <code>_id</code> <code>unknown</code>?",id:"why-is-_id-unknown",level:3}];function c(e){const o={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h2,{id:"repository",children:"Repository"}),"\n",(0,s.jsx)(o.h3,{id:"what-happened-to-the-original-author",children:"What happened to the original author?"}),"\n",(0,s.jsxs)(o.p,{children:["A: The original author szokodiakos (github name) ",(0,s.jsx)(o.a,{href:"https://github.com/szokodiakos/typegoose/issues/99#issuecomment-364639150",children:"has abandoned the project"}),", but might look into it again at some time."]}),"\n",(0,s.jsx)(o.h3,{id:"is-this-project-still-active",children:"Is this Project still active?"}),"\n",(0,s.jsxs)(o.p,{children:["A: Yes it is, but not on the main repository anymore because of ",(0,s.jsx)(o.a,{href:"#what-happened-to-the-original-author",children:"What happened to the original author?"})," and ",(0,s.jsx)(o.a,{href:"https://help.github.com/en/articles/permission-levels-for-a-user-account-repository",children:"Github Permissions"})," (TL;DR: a collaborator cannot add another collaborator, only the owner can)"]}),"\n",(0,s.jsx)(o.h3,{id:"why-is-the-package-now-released-in-another-package",children:"Why is the package now released in another package?"}),"\n",(0,s.jsxs)(o.p,{children:["(context: from ",(0,s.jsx)(o.code,{children:"typegoose"})," to ",(0,s.jsx)(o.code,{children:"@typegoose/typegoose"}),")",(0,s.jsx)(o.br,{}),"\n","A: Because of a Repository Switch (",(0,s.jsx)(o.a,{href:"#is-this-project-still-active",children:"reasons"}),") and because a name cannot be used by multiple packages, except if it is scoped."]}),"\n",(0,s.jsxs)(o.h3,{id:"why-typegoosetypegoose",children:["Why ",(0,s.jsx)(o.code,{children:"@typegoose/typegoose"})]}),"\n",(0,s.jsxs)(o.p,{children:["A: Because I (hasezoey) don't have permissions over the old ",(0,s.jsx)(o.code,{children:"typegoose"})," repository and I don't want to touch the old npm package. It is a typical forking and continuation of an ",(0,s.jsx)(o.a,{href:"https://en.wikipedia.org/wiki/Open-source_software",children:"OSS"})," project."]}),"\n",(0,s.jsx)(o.h2,{id:"functional",children:"Functional"}),"\n",(0,s.jsxs)(o.h3,{id:"why-does-new-model-not-have-types",children:["Why does ",(0,s.jsx)(o.code,{children:"new Model({})"})," not have types?"]}),"\n",(0,s.jsxs)(o.p,{children:["A: Since around mongoose 6.0.0, ",(0,s.jsx)(o.code,{children:"new Model()"})," and ",(0,s.jsx)(o.code,{children:"Model.create()"})," have types, but they are not enforced (as in they will be suggested, but will not error if not present / other unknown properties are present)."]}),"\n",(0,s.jsxs)(o.h3,{id:"do-all-classes-get-compiled-to-their-own-mongooseschema",children:["Do all Classes get compiled to their own ",(0,s.jsx)(o.code,{children:"mongoose.Schema"}),"?"]}),"\n",(0,s.jsxs)(o.p,{children:["A: Yes, all classes compiled through typegoose (like ",(0,s.jsx)(o.code,{children:"type: () => SubClass"}),", or by reflection) will be their own ",(0,s.jsx)(o.code,{children:"mongoose.Schema"}),"."]}),"\n",(0,s.jsx)(o.p,{children:"This means that the following is equal:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'// Native Mongoose\nconst subSchema = new mongoose.Schema({ someprop: { type: String } });\nconst mainSchema = new mongoose.Schema({\n  subDoc: subSchema\n})\n\n// Typegoose\nclass Sub {\n  @prop()\n  public someprop: string;\n}\n\nclass Main {\n  @prop()\n  public subDoc: Sub; // by reflection, not explicitly defining option "type"\n  // OR\n  @prop({ type: () => Sub }) // defining option "type" explicitly\n  public subDoc: Sub;\n}\n'})}),"\n",(0,s.jsxs)(o.p,{children:["There is also a option to not use sub-classes, called ",(0,s.jsxs)(o.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#passthrough-class",children:["the ",(0,s.jsx)(o.code,{children:"Passthrough"})," class"]}),", but it is not recommended to be used."]}),"\n",(0,s.jsxs)(o.h3,{id:"i-need-to-set-_id-manually-how-to-do-it-properly",children:["I need to set ",(0,s.jsx)(o.code,{children:"_id"})," manually, how to do it properly?"]}),"\n",(0,s.jsxs)(o.p,{children:["A: ",(0,s.jsx)(o.code,{children:"_id"})," can be easily defined in the class itself, but note that no ",(0,s.jsx)(o.code,{children:"@prop"})," should be set, unless you want to overwrite the defaults (like type or how defaults are generated)"]}),"\n",(0,s.jsx)(o.p,{children:"Example:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:'// not overwriting the defaults\nclass Main {\n  // no "@prop" because of not wanting to overwrite the defaults\n  public _id!: mongoose.Types.ObjectId;\n}\n\nclass Main2 {\n  // overwrite the "_id" type to be a string and generated by a uuidv4 function\n  @prop({ required: true, default: () => uuidv4() })\n  public _id!: string;\n}\n'})}),"\n",(0,s.jsx)(o.h2,{id:"edge-cases",children:"Edge Cases"}),"\n",(0,s.jsxs)(o.h3,{id:"i-want-to-the-return-document-with-property-id-instead-of-_id",children:["I want to the return document with property ",(0,s.jsx)(o.code,{children:"id"})," instead of ",(0,s.jsx)(o.code,{children:"_id"})]}),"\n",(0,s.jsxs)(o.p,{children:["Mongoose automatically adds a virtual named ",(0,s.jsx)(o.code,{children:"id"}),", use the following for type definitions if it does not already exist:"]}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:"class Cat {\n  id: mongoose.Types.ObjectId;\n  _id: mongoose.Types.ObjectId;\n}\n"})}),"\n",(0,s.jsxs)(o.h3,{id:"why-is-_id-unknown",children:["Why is ",(0,s.jsx)(o.code,{children:"_id"})," ",(0,s.jsx)(o.code,{children:"unknown"}),"?"]}),"\n",(0,s.jsx)(o.p,{children:"Your class is likely just empty, and typescript somehow does not correctly match that and treats it like a generic object."}),"\n",(0,s.jsx)(o.p,{children:"Example:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-ts",children:"class Dummy {}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: unknown\n\nclass Dummy {\n  // simple dummy property for types, will complain if actually used\n  public _dummy: never;\n}\nconst DummyModel = getModelForClass(Dummy);\nconst newDoc = new DummyModel()\nnewDoc._id; // type: mongoose.Types.ObjectId\n"})})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>d});var t=n(6540);const s={},i=t.createContext(s);function a(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);