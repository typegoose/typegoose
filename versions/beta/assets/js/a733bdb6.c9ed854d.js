"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1007],{47:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"guides/advanced/using-objectid-type","title":"Using ObjectId Type","description":"Using the type ObjectId can be done by defining it as follows:","source":"@site/../docs/guides/advanced/objectId.md","sourceDirName":"guides/advanced","slug":"/guides/advanced/using-objectid-type","permalink":"/typegoose/versions/beta/docs/guides/advanced/using-objectid-type","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/advanced/objectId.md","tags":[],"version":"current","frontMatter":{"id":"using-objectid-type","title":"Using ObjectId Type"},"sidebar":"guides","previous":{"title":"Change _id Type","permalink":"/typegoose/versions/beta/docs/guides/advanced/change-id-type"},"next":{"title":"Non-Nested Discriminators","permalink":"/typegoose/versions/beta/docs/guides/advanced/non-nested-discriminators"}}');var s=o(4848),d=o(8453);const i={id:"using-objectid-type",title:"Using ObjectId Type"},c=void 0,r={},a=[];function p(e){const t={code:"code",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Using the type ",(0,s.jsx)(t.code,{children:"ObjectId"})," can be done by defining it as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"import mongoose from 'mongoose';\nimport { prop } from '@typegoose/typegoose';\n\nclass FooModel {\n  @prop()\n  userId: mongoose.Types.ObjectId;\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You need to refer to the full length type since defining it as ",(0,s.jsx)(t.code,{children:"type ObjectId = mongoose.Types.ObjectId"})," and referencing that will lead to it being an ",(0,s.jsx)(t.code,{children:"Object"})," at compile time, meaning Typegoose will translate the property type to ",(0,s.jsx)(t.code,{children:"Mixed"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["In order to query this model later you should use the type ",(0,s.jsx)(t.code,{children:"mongoose.Types.ObjectId"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const FooModel = getModelForClass(FooModel);\nFooModel.findOne({ userId: new mongoose.Types.ObjectId('5e997f95d6a35f3a0def3339') });\n"})})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>i,x:()=>c});var n=o(6540);const s={},d=n.createContext(s);function i(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);