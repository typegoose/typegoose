"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[3734],{4814:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"guides/migration/migrate-6","title":"Migrate to 6.0.0","description":"These are the changes made for 6.0.0 that are breaking or just important to know.","source":"@site/../docs/guides/migration/migrate-6.md","sourceDirName":"guides/migration","slug":"/guides/migration/migrate-6","permalink":"/typegoose/versions/beta/docs/guides/migration/migrate-6","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/migration/migrate-6.md","tags":[],"version":"current","frontMatter":{"id":"migrate-6","title":"Migrate to 6.0.0"},"sidebar":"guides","previous":{"title":"Migrate to 7.0.0","permalink":"/typegoose/versions/beta/docs/guides/migration/migrate-7"}}');var n=t(4848),i=t(8453);const d={id:"migrate-6",title:"Migrate to 6.0.0"},r=void 0,a={},l=[{value:"Requirements changed",id:"requirements-changed",level:2},{value:"InstanceType changed",id:"instancetype-changed",level:2},{value:"<code>getModelForClass</code>, <code>setModelForClass</code>, <code>buildSchema</code>",id:"getmodelforclass-setmodelforclass-buildschema",level:2},{value:"ModelOptions",id:"modeloptions",level:2},{value:"Hooks",id:"hooks",level:2},{value:"Methods (staticMethod, instanceMethod, virtuals)",id:"methods-staticmethod-instancemethod-virtuals",level:2},{value:"setModelForClass is deprecated",id:"setmodelforclass-is-deprecated",level:2},{value:"ModelType is abstracted",id:"modeltype-is-abstracted",level:2},{value:"[IC] data.ts collections are now <code>Map&lt;T, S&gt;</code>",id:"ic-datats-collections-are-now-mapt-s",level:2},{value:"Notes",id:"notes",level:2}];function c(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"These are the changes made for 6.0.0 that are breaking or just important to know."}),"\n",(0,n.jsx)(s.admonition,{title:"Important, Read this first",type:"warning",children:(0,n.jsxs)(s.p,{children:["This Guide is written for migration from version ",(0,n.jsx)(s.code,{children:"5.9.2"})," to ",(0,n.jsx)(s.code,{children:"6.0.0"}),", for versions ",(0,n.jsx)(s.code,{children:">6.0.0 <7.0.0"}),", please consult the ",(0,n.jsx)(s.a,{href:"https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md",children:"CHANGELOG"})]})}),"\n",(0,n.jsx)(s.h2,{id:"requirements-changed",children:"Requirements changed"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["Typescript ",(0,n.jsx)(s.code,{children:"3.5"})," is now required / recommended"]}),"\n",(0,n.jsxs)(s.li,{children:["Mongoose ",(0,n.jsx)(s.code,{children:"5.7.1"})," or higher is now required"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"instancetype-changed",children:"InstanceType changed"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"InstanceType<T>"})," was renamed to ",(0,n.jsx)(s.code,{children:"DocumentType<T>"})]}),"\n",(0,n.jsxs)(s.h2,{id:"getmodelforclass-setmodelforclass-buildschema",children:[(0,n.jsx)(s.code,{children:"getModelForClass"}),", ",(0,n.jsx)(s.code,{children:"setModelForClass"}),", ",(0,n.jsx)(s.code,{children:"buildSchema"})]}),"\n",(0,n.jsx)(s.p,{children:'They are not in the Typegoose class anymore. They are now outsourced, which means the new syntax is the following (for a "seamless" migration the Typegoose Class still exists and has the functions, but the will be deprecated):'}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"import { getModelForClass } from 'typegoose';\nclass Name {}\n\nconst NameModel = getModelForClass(Name);\n"})}),"\n",(0,n.jsx)(s.p,{children:"Note: Typegoose Class still has all the functions, but they are marked deprecated & are just passthroughs to the new functions."}),"\n",(0,n.jsx)(s.h2,{id:"modeloptions",children:"ModelOptions"}),"\n",(0,n.jsx)(s.p,{children:"Use the following decorator now."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ts",children:"@modelOptions({ schemaOptions: {} })\nclass Name {}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Otherwise, the functions still override the settings made in ",(0,n.jsx)(s.code,{children:"modelOptions"})]}),"\n",(0,n.jsx)(s.h2,{id:"hooks",children:"Hooks"}),"\n",(0,n.jsxs)(s.p,{children:["Hooks received a change (in 6.0.0-13) for the types to comply with the latest mongoose (5.6.8)",(0,n.jsx)(s.br,{}),"\n","-> no workarounds or typedefs required anymore."]}),"\n",(0,n.jsx)(s.h2,{id:"methods-staticmethod-instancemethod-virtuals",children:"Methods (staticMethod, instanceMethod, virtuals)"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"@staticMethod"})," & ",(0,n.jsx)(s.code,{children:"@instanceMethod"})," were deprecated in favor of ",(0,n.jsx)(s.code,{children:"schema.loadClass()"}),". These decorators are no longer needed, because the methods are auto-detected."]}),"\n",(0,n.jsxs)(s.p,{children:["For ",(0,n.jsx)(s.a,{href:"https://mongoosejs.com/docs/tutorials/virtuals.html",children:"virtuals"}),", simply use ",(0,n.jsx)(s.code,{children:"get somevalue() { return ''; }"})," and ",(0,n.jsx)(s.code,{children:"set somevalue(val: string) { }"})," (",(0,n.jsx)(s.code,{children:"@prop"})," is no longer needed). [",(0,n.jsx)(s.a,{href:"/typegoose/versions/beta/docs/api/virtuals#get--set",children:"New Documentation"}),"]"]}),"\n",(0,n.jsxs)(s.p,{children:["For ",(0,n.jsx)(s.a,{href:"https://mongoosejs.com/docs/tutorials/virtuals.html#populate",children:"populating virtuals"}),", use ",(0,n.jsx)(s.code,{children:"@prop({ localField, foreignField })"}),". The ",(0,n.jsx)(s.code,{children:"overwrite"})," option is no longer needed. [",(0,n.jsx)(s.a,{href:"/typegoose/versions/beta/docs/api/virtuals#virtual-populate",children:"New Documentation"}),"]"]}),"\n",(0,n.jsxs)(s.p,{children:["Update: ",(0,n.jsx)(s.code,{children:"@staticMethod"})," & ",(0,n.jsx)(s.code,{children:"@instanceMethod"})," were removed in 6.1.0-1"]}),"\n",(0,n.jsx)(s.h2,{id:"setmodelforclass-is-deprecated",children:"setModelForClass is deprecated"}),"\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.code,{children:"setModelForClass()"})," has been deprecated, because Mongoose would throw an OverwriteModelError if it was attempted to overwrite a model.",(0,n.jsx)(s.br,{}),"\n","-> use ",(0,n.jsx)(s.code,{children:"getModelForClass()"})]}),"\n",(0,n.jsx)(s.h2,{id:"modeltype-is-abstracted",children:"ModelType is abstracted"}),"\n",(0,n.jsxs)(s.p,{children:["The type ",(0,n.jsx)(s.code,{children:"ModelType"})," has been abstracted to ",(0,n.jsx)(s.code,{children:"ReturnModelType<typeof Class>"})," with documentation. But, if for any reason ",(0,n.jsx)(s.code,{children:"ModelType"})," is needed, it needs to be imported from ",(0,n.jsx)(s.code,{children:"@typegoose/typegoose/lib/types"}),"."]}),"\n",(0,n.jsxs)(s.h2,{id:"ic-datats-collections-are-now-mapt-s",children:["[IC] data.ts collections are now ",(0,n.jsx)(s.code,{children:"Map<T, S>"})]}),"\n",(0,n.jsx)(s.p,{children:"data.ts's collections got refactored to use ES6 Maps"}),"\n",(0,n.jsx)(s.h2,{id:"notes",children:"Notes"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"[IC] The internal handling of schema creation has changed a bit, however we tried to keep the inputs & outputs the same, meaning in some edge-cases schema creation might not work as expected."}),"\n"]}),"\n",(0,n.jsx)(s.hr,{}),"\n",(0,n.jsx)("sub",{children:(0,n.jsxs)(s.em,{children:[(0,n.jsx)(s.code,{children:"IC"})," means ",(0,n.jsx)(s.code,{children:"internal change"})]})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>r});var o=t(6540);const n={},i=o.createContext(n);function d(e){const s=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),o.createElement(i.Provider,{value:s},e.children)}}}]);