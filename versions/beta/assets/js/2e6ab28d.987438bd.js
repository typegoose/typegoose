"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[1487],{1391:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/migration/migrate-10","title":"Migrate to 10.0.0","description":"These are the changes made for 10.0.0 that are breaking or just important to know","source":"@site/../docs/guides/migration/migrate-10.md","sourceDirName":"guides/migration","slug":"/guides/migration/migrate-10","permalink":"/typegoose/versions/beta/docs/guides/migration/migrate-10","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/migration/migrate-10.md","tags":[],"version":"current","frontMatter":{"id":"migrate-10","title":"Migrate to 10.0.0"},"sidebar":"guides","previous":{"title":"Migrate to 11.0.0","permalink":"/typegoose/versions/beta/docs/guides/migration/migrate-11"},"next":{"title":"Migrate to 9.0.0","permalink":"/typegoose/versions/beta/docs/guides/migration/migrate-9"}}');var i=s(4848),t=s(8453);const d={id:"migrate-10",title:"Migrate to 10.0.0"},r=void 0,a={},c=[{value:"Requirements changed",id:"requirements-changed",level:2},{value:"TSConfig Target is now <code>es2020</code>",id:"tsconfig-target-is-now-es2020",level:2},{value:"<code>data@schemas</code> got refactored to be metadata",id:"dataschemas-got-refactored-to-be-metadata",level:2},{value:"Hooks got refactored",id:"hooks-got-refactored",level:2},{value:"<code>Ref</code> now transparently uses <code>DocumentType</code>",id:"ref-now-transparently-uses-documenttype",level:2},{value:"<code>isDocument</code> now has types working with typescript 4.9",id:"isdocument-now-has-types-working-with-typescript-49",level:2},{value:"Indexes can now be set to not be inherited",id:"indexes-can-now-be-set-to-not-be-inherited",level:2},{value:"Nested discriminators can now be defined on the Base Class",id:"nested-discriminators-can-now-be-defined-on-the-base-class",level:2},{value:"<code>buildSchema</code> now only accepts 2 arguments instead of 3",id:"buildschema-now-only-accepts-2-arguments-instead-of-3",level:2},{value:"Option <code>runSyncIndexes</code> has been removed",id:"option-runsyncindexes-has-been-removed",level:2},{value:"Function <code>getClassForDocument</code> has been removed",id:"function-getclassfordocument-has-been-removed",level:2},{value:"Deprecated options got removed",id:"deprecated-options-got-removed",level:2},{value:"<code>disablePluginsOnDiscriminator</code> and <code>$isDiscriminator</code>",id:"disablepluginsondiscriminator-and-isdiscriminator",level:3},{value:"<code>IndexOptions</code> and <code>@index</code> now dont have a generic anymore",id:"indexoptions-and-index-now-dont-have-a-generic-anymore",level:3},{value:"Alias for <code>WhatIsIt</code> to <code>PropType</code> have been removed",id:"alias-for-whatisit-to-proptype-have-been-removed",level:2},{value:"Some Unused types have been removed",id:"some-unused-types-have-been-removed",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"These are the changes made for 10.0.0 that are breaking or just important to know"}),"\n",(0,i.jsx)(n.admonition,{title:"Important, Read this first",type:"warning",children:(0,i.jsxs)(n.p,{children:["This Guide is written for migration from version ",(0,i.jsx)(n.code,{children:"9.13.2"})," to ",(0,i.jsx)(n.code,{children:"10.0.0"}),", for versions ",(0,i.jsx)(n.code,{children:">10.0.0 <11.0.0"}),", please consult the ",(0,i.jsx)(n.a,{href:"https://github.com/typegoose/typegoose/blob/master/CHANGELOG.md",children:"CHANGELOG"})]})}),"\n",(0,i.jsx)(n.h2,{id:"requirements-changed",children:"Requirements changed"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Mongoose ",(0,i.jsx)(n.code,{children:"6.8.0"})," or higher is now required"]}),"\n",(0,i.jsxs)(n.li,{children:["Typescript ",(0,i.jsx)(n.code,{children:"4.9"})," or higher is now required to be used"]}),"\n",(0,i.jsx)(n.li,{children:"NodeJS 14 is now the lowest supported nodejs version"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"tsconfig-target-is-now-es2020",children:["TSConfig Target is now ",(0,i.jsx)(n.code,{children:"es2020"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"tsconfig"})," target has been changed to ",(0,i.jsx)(n.code,{children:"es2020"}),", which also makes the ouput incompatible with anything before NodeJS 14.",(0,i.jsx)(n.br,{}),"\n","This was changed because it outputs less polyfills and makes debugging easier (also bundle size is ",(0,i.jsx)(n.em,{children:"slightly"})," lower)"]}),"\n",(0,i.jsxs)(n.h2,{id:"dataschemas-got-refactored-to-be-metadata",children:[(0,i.jsx)(n.code,{children:"data@schemas"})," got refactored to be metadata"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"schemas"})," map from ",(0,i.jsx)(n.code,{children:"src/internal/data"})," got refactored to be a map on the classes themself, called ",(0,i.jsx)(n.code,{children:"SchemaCache"}),", see ",(0,i.jsx)(n.a,{href:"https://github.com/typegoose/typegoose/blob/74bfa7f357f135987389b33b2678f89117b80e9a/src/internal/constants.ts#L56",children:(0,i.jsx)(n.code,{children:"src/internal/constants.ts@DecoratorKeys::CachedSchema"})}),"."]}),"\n",(0,i.jsx)(n.p,{children:"This means there is now 1 less interference with classes of the same name, currently there still exists:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data@models"}),": Stores the model with the key being the model name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"data@constructors"}),": Stored the classes with the key being the model name"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"hooks-got-refactored",children:"Hooks got refactored"}),"\n",(0,i.jsxs)(n.p,{children:["Hook types got refactored to be more closely matching mongoose's definition, with slight QOL updates.",(0,i.jsx)(n.br,{}),"\n","Hook internals also got refactored to use less code from what mongoose already supports."]}),"\n",(0,i.jsxs)(n.h2,{id:"ref-now-transparently-uses-documenttype",children:[(0,i.jsx)(n.code,{children:"Ref"})," now transparently uses ",(0,i.jsx)(n.code,{children:"DocumentType"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"Ref"})," got updated to transparently use ",(0,i.jsx)(n.code,{children:"DocumentType"}),", which made the type checks for ",(0,i.jsx)(n.code,{children:"isDocument"})," easier, which made it possible to changed the types for ",(0,i.jsxs)(n.a,{href:"#isdocument-now-has-types-working-with-typescript-49",children:[(0,i.jsx)(n.code,{children:"isDocument"})," now has types working with typescript 4.9"]}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"isdocument-now-has-types-working-with-typescript-49",children:[(0,i.jsx)(n.code,{children:"isDocument"})," now has types working with typescript 4.9"]}),"\n",(0,i.jsx)(n.p,{children:"When typescript 4.9 first released, it didnt work with typegoose and version 9.x still does not work with typescript 4.9, but 10.0 now works with typescript 4.9"}),"\n",(0,i.jsxs)(n.p,{children:["As a side-effect, the type-narrowing also works with the ",(0,i.jsx)(n.code,{children:"else"})," case and excludes the ",(0,i.jsx)(n.code,{children:"true"})," case."]}),"\n",(0,i.jsx)(n.h2,{id:"indexes-can-now-be-set-to-not-be-inherited",children:"Indexes can now be set to not be inherited"}),"\n",(0,i.jsxs)(n.p,{children:["In Typegoose 10.0 a new ModelOption has been introduced named ",(0,i.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/model-options#disablelowerindexes",children:(0,i.jsx)(n.code,{children:"disableLowerIndexes"})})," to choose to not inherit any of the lower indexes."]}),"\n",(0,i.jsx)(n.h2,{id:"nested-discriminators-can-now-be-defined-on-the-base-class",children:"Nested discriminators can now be defined on the Base Class"}),"\n",(0,i.jsxs)(n.p,{children:["With Typegoose 10.0 nested discriminators can now be set via the model-option ",(0,i.jsx)(n.code,{children:"options.discriminators"})," instead of just via the prop-option ",(0,i.jsx)(n.code,{children:"discriminators"}),".",(0,i.jsx)(n.br,{}),"\n","This will be useful when the base class (and the discriminators) are used multiple times with the same definition."]}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["A Error is thrown when both this option and the prop-option ",(0,i.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/decorators/prop#discriminators",children:(0,i.jsx)(n.code,{children:"discriminators"})})," are defined.",(0,i.jsx)(n.br,{}),"\n","See ",(0,i.jsx)(n.a,{href:"/typegoose/versions/beta/docs/guides/error-warning-details#duplicate-option-definition-e032",children:"Duplicate Option Definition [E032]"}),"."]})}),"\n",(0,i.jsxs)(n.h2,{id:"buildschema-now-only-accepts-2-arguments-instead-of-3",children:[(0,i.jsx)(n.code,{children:"buildSchema"})," now only accepts 2 arguments instead of 3"]}),"\n",(0,i.jsxs)(n.p,{children:["With Typegoose 10.0 ",(0,i.jsx)(n.code,{children:"buildSchema"})," now only accepts 2 arguments instead of 3, where the last 2 (previously named ",(0,i.jsx)(n.code,{children:"options"})," and ",(0,i.jsx)(n.code,{children:"overwriteOptions"}),") have been merged into just ",(0,i.jsx)(n.code,{children:"options"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"option-runsyncindexes-has-been-removed",children:["Option ",(0,i.jsx)(n.code,{children:"runSyncIndexes"})," has been removed"]}),"\n",(0,i.jsxs)(n.p,{children:["The Model Option ",(0,i.jsx)(n.code,{children:"runSyncIndexes"})," has been removed. If wanting to continue to use it, manually call ",(0,i.jsx)(n.code,{children:"model.syncIndexes()"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"function-getclassfordocument-has-been-removed",children:["Function ",(0,i.jsx)(n.code,{children:"getClassForDocument"})," has been removed"]}),"\n",(0,i.jsxs)(n.p,{children:["Function ",(0,i.jsx)(n.code,{children:"getClassForDocument"})," has been removed and merged into ",(0,i.jsx)(n.a,{href:"/typegoose/versions/beta/docs/api/functions/get-class",children:(0,i.jsx)(n.code,{children:"getClass"})})," directly."]}),"\n",(0,i.jsx)(n.h2,{id:"deprecated-options-got-removed",children:"Deprecated options got removed"}),"\n",(0,i.jsxs)(n.h3,{id:"disablepluginsondiscriminator-and-isdiscriminator",children:[(0,i.jsx)(n.code,{children:"disablePluginsOnDiscriminator"})," and ",(0,i.jsx)(n.code,{children:"$isDiscriminator"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"disablePluginsOnDiscriminator"})," and ",(0,i.jsx)(n.code,{children:"$isDiscriminator"})," were temporary options to work-around some discriminator problems, and got deprecated in typegoose ",(0,i.jsx)(n.code,{children:"9.13.0"})," and now they are removed again in ",(0,i.jsx)(n.code,{children:"10.0"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"indexoptions-and-index-now-dont-have-a-generic-anymore",children:[(0,i.jsx)(n.code,{children:"IndexOptions"})," and ",(0,i.jsx)(n.code,{children:"@index"})," now dont have a generic anymore"]}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"IndexOptions"})," and decorator ",(0,i.jsx)(n.code,{children:"@index"})," now have no generic anymore and will result in a typescript error noting this, simply remove the generic.",(0,i.jsx)(n.br,{}),"\n","This Generic was unused since ",(0,i.jsx)(n.code,{children:"9.10.0"}),"."]}),"\n",(0,i.jsxs)(n.h2,{id:"alias-for-whatisit-to-proptype-have-been-removed",children:["Alias for ",(0,i.jsx)(n.code,{children:"WhatIsIt"})," to ",(0,i.jsx)(n.code,{children:"PropType"})," have been removed"]}),"\n",(0,i.jsxs)(n.p,{children:["The Enum (and some internal options) had been renamed from ",(0,i.jsx)(n.code,{children:"WhatIsIt"})," to ",(0,i.jsx)(n.code,{children:"PropType"})," in typegoose ",(0,i.jsx)(n.code,{children:"9.5.0"}),", and for backwards-compatability had been aliased, but now in ",(0,i.jsx)(n.code,{children:"10.0.0"})," these aliases (and final remaining property names) have been removed or renamed."]}),"\n",(0,i.jsx)(n.h2,{id:"some-unused-types-have-been-removed",children:"Some Unused types have been removed"}),"\n",(0,i.jsx)(n.p,{children:"Some unused types that had been meant for internal use have been removed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"EmptyVoidFn"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"IObjectWithTypegooseName"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var o=s(6540);const i={},t=o.createContext(i);function d(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);