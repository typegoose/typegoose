"use strict";(self.webpackChunktypegoose_website=self.webpackChunktypegoose_website||[]).push([[9619],{1470:(e,n,o)=>{o.d(n,{A:()=>w});var s=o(6540),t=o(4164),a=o(3104),l=o(6347),r=o(205),i=o(7485),c=o(1682),d=o(679);function u(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:o}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:o,attributes:s,default:t}}=e;return{value:n,label:o,attributes:s,default:t}}))}(o);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,o])}function m(e){let{value:n,tabValues:o}=e;return o.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:o}=e;const t=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:o}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!o)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return o??null}({queryString:n,groupId:o});return[(0,i.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})}),[a,t])]}function g(e){const{defaultValue:n,queryString:o=!1,groupId:t}=e,a=p(e),[l,i]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:o}=e;if(0===o.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:o}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${o.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=o.find((e=>e.default))??o[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:a}))),[c,u]=h({queryString:o,groupId:t}),[g,f]=function(e){let{groupId:n}=e;const o=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,a]=(0,d.Dv)(o);return[t,(0,s.useCallback)((e=>{o&&a.set(e)}),[o,a])]}({groupId:t}),x=(()=>{const e=c??g;return m({value:e,tabValues:a})?e:null})();(0,r.A)((()=>{x&&i(x)}),[x]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,a]),tabValues:a}}var f=o(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=o(4848);function j(e){let{className:n,block:o,selectedValue:s,selectValue:l,tabValues:r}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),d=e=>{const n=e.currentTarget,o=i.indexOf(n),t=r[o].value;t!==s&&(c(n),l(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const o=i.indexOf(e.currentTarget)+1;n=i[o]??i[0];break}case"ArrowLeft":{const o=i.indexOf(e.currentTarget)-1;n=i[o]??i[i.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":o},n),children:r.map((e=>{let{value:n,label:o,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>{i.push(e)},onKeyDown:u,onClick:d,...a,className:(0,t.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":s===n}),children:o??n},n)}))})}function y(e){let{lazy:n,children:o,selectedValue:a}=e;const l=(Array.isArray(o)?o:[o]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function v(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,t.A)("tabs-container",x.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(y,{...n,...e})]})}function w(e){const n=(0,f.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>r});var s=o(6540);const t={},a=s.createContext(t);function l(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},9365:(e,n,o)=>{o.d(n,{A:()=>l});o(6540);var s=o(4164);const t={tabItem:"tabItem_Ymn6"};var a=o(4848);function l(e){let{children:n,hidden:o,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,l),hidden:o,children:n})}},9483:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"guides/integration-examples/common-plugins","title":"Common Plugins","description":"Typegoose supports mongoose plugins and this Guide will showcase how to use some plugins, more plugins or updating their versions can be done with a PR to typegoose\'s repository.","source":"@site/../docs/guides/integration-examples/common-plugins.mdx","sourceDirName":"guides/integration-examples","slug":"/guides/integration-examples/common-plugins","permalink":"/typegoose/versions/beta/docs/guides/integration-examples/common-plugins","draft":false,"unlisted":false,"editUrl":"https://github.com/typegoose/typegoose/edit/beta/docs/../docs/guides/integration-examples/common-plugins.mdx","tags":[],"version":"current","frontMatter":{"id":"common-plugins","title":"Common Plugins"},"sidebar":"guides","previous":{"title":"Using with @deepkit/type","permalink":"/typegoose/versions/beta/docs/guides/integration-examples/using-with-deepkit-type"},"next":{"title":"Typegoose Logger","permalink":"/typegoose/versions/beta/docs/guides/advanced/logger"}}');var t=o(4848),a=o(8453),l=o(1470),r=o(9365);const i={id:"common-plugins",title:"Common Plugins"},c=void 0,d={},u=[{value:"mongoose-autopopulate",id:"mongoose-autopopulate",level:2},{value:"mongoose-findorcreate",id:"mongoose-findorcreate",level:2},{value:"mongoose-sequence",id:"mongoose-sequence",level:2},{value:"@typegoose/auto-increment",id:"typegooseauto-increment",level:2},{value:"AutoIncrementSimple",id:"autoincrementsimple",level:3},{value:"AutoIncrementID",id:"autoincrementid",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Typegoose supports mongoose plugins and this Guide will showcase how to use some plugins, more plugins or updating their versions can be done with a PR to ",(0,t.jsx)(n.a,{href:"https://github.com/typegoose/typegoose",children:"typegoose's repository"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If the Example does not have tabs for ",(0,t.jsx)(n.code,{children:"esModuleInterop"}),", then assume it is only written and tested for ",(0,t.jsx)(n.code,{children:"esModuleInterop: false"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"mongoose-autopopulate",children:"mongoose-autopopulate"}),"\n",(0,t.jsx)(n.p,{children:"Last updated for:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"@typegoose/typegoose@9.0.0\nmongoose-autopopulate@0.14.0\n"})}),"\n",(0,t.jsxs)(l.A,{groupId:"npm2yarn",children:[(0,t.jsx)(r.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save mongoose-autopopulate\n"})})}),(0,t.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add mongoose-autopopulate\n"})})}),(0,t.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add mongoose-autopopulate\n"})})}),(0,t.jsx)(r.A,{value:"bun",label:"Bun",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add mongoose-autopopulate\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["Typegoose has the prop option ",(0,t.jsx)(n.code,{children:"autopopulate"})," implemented, but it only has an effect, if ",(0,t.jsx)(n.a,{href:"https://github.com/mongodb-js/mongoose-autopopulate",children:(0,t.jsx)(n.code,{children:"mongoose-autopopulate"})})," is installed and used too."]}),"\n",(0,t.jsxs)(l.A,{groupId:"esModuleInterop",children:[(0,t.jsx)(r.A,{value:"esModuleInterop-false",label:"esModuleInterop: false",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import mongoose from 'mongoose';\nimport * as autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don't work with \"esModuleInterop: false\"\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n"})})}),(0,t.jsx)(r.A,{value:"esModuleInterop-true",label:"esModuleInterop: true",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import mongoose from 'mongoose';\nimport autopopulate from 'mongoose-autopopulate';\nimport { plugin, prop, Ref, getModelForClass } from '@typegoose/typegoose';\n\n@plugin(autopopulate)\nclass SomeClass {\n  @prop({ autopopulate: true, ref: 'SomeReferencedClass' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n\nclass SomeReferencedClass {\n  // a dummy property is required, otherwise the class will equal to others\n  @prop()\n  public dummy?: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\nconst SomeReferencedClassModel = getModelForClass(SomeReferencedClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  const reference = await SomeReferencedClassModel.create({ dummy: 'hello' });\n  const { _id: id } = await SomeClassModel.create({ populateField: reference } as SomeClass);\n\n  console.log(await SomeClassModel.findById(id).exec()); // output will be populated\n\n  await mongoose.disconnect();\n})();\n"})})})]}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["If you have a ",(0,t.jsx)(n.code,{children:"ref"})," which refers back to its own class/model, like having a User class with a ",(0,t.jsx)(n.code,{children:"createdBy"})," field referring back to User, then you'll need to set the ",(0,t.jsx)(n.code,{children:"maxDepth"})," prop of ",(0,t.jsx)(n.code,{children:"autocomplete"})," to 1. If you don't do this, Mongoose will do recursive calls to\nthe user collection 10 times, extremely delaying the output of the query. Below is an example of how to set ",(0,t.jsx)(n.code,{children:"maxDepth"}),"."]})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// the types of "autopopulate" may change depending on the tsconfig option "esModuleInterop"\n@plugin(autopopulate as any) // this is a dirty fix, because the types of this plugin don\'t work\nclass SomeClass {\n  @prop({ autopopulate: { maxDepth: 1 }, ref: \'SomeReferencedClass\' })\n  public populateField: Ref<SomeReferencedClass>;\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"mongoose-findorcreate",children:"mongoose-findorcreate"}),"\n",(0,t.jsx)(n.p,{children:"Last updated for:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"@typegoose/typegoose@11.0.0\nmongoose-findorcreate@4.0.0\n"})}),"\n",(0,t.jsxs)(l.A,{groupId:"npm2yarn",children:[(0,t.jsx)(r.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save mongoose-findorcreate\n"})})}),(0,t.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add mongoose-findorcreate\n"})})}),(0,t.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add mongoose-findorcreate\n"})})}),(0,t.jsx)(r.A,{value:"bun",label:"Bun",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add mongoose-findorcreate\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["The plugin ",(0,t.jsx)(n.code,{children:"mongoose-findorcreate"})," can easily be used with typegoose. Here's how to use it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { DocumentType, getModelForClass, plugin, prop, defaultClasses } from '@typegoose/typegoose';\nimport mongoose from 'mongoose';\nimport * as findorcreate from 'mongoose-findorcreate';\n\n/**\n * Result for the `findOrCreate` function from mongoose-findorcreate\n */\nexport interface FindOrCreateResult<T> {\n  created: boolean;\n  doc: DocumentType<T>;\n}\n\n/**\n * This class contains all types for the module \"mongoose-findorcreate\", adjusted for typegoose\n */\n@plugin(findorcreate)\nexport abstract class FindOrCreate {\n  public static findOrCreate: <T extends FindOrCreate>(\n    this: mongoose.Model<T>,\n    condition: FilterQuery<T>,\n    createWith?: any\n  ) => Promise<FindOrCreateResult<T>>;\n}\n\nclass SomeClass extends FindOrCreate {\n  @prop()\n  public someField!: string;\n}\n\nconst SomeClassModel = getModelForClass(SomeClass);\n\n(async () => {\n  await mongoose.connect(`mongodb://localhost:27017/`, { dbName: 'guides' });\n\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' }));\n  console.log(await SomeClassModel.findOrCreate({ someField: 'Hello' })); // both will give the same output\n\n  await mongoose.disconnect();\n})();\n"})}),"\n",(0,t.jsxs)(n.p,{children:["A full example can be found in the ",(0,t.jsx)(n.code,{children:"typegoose-examples"})," repository under ",(0,t.jsx)(n.a,{href:"https://github.com/typegoose/typegoose-examples/tree/master/examples/plugin-findorcreate",children:(0,t.jsx)(n.code,{children:"examples/plugin-findorcreate"})}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"mongoose-sequence",children:"mongoose-sequence"}),"\n",(0,t.jsx)(n.p,{children:"Last updated for:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"@typegoose/typegoose@7.1.0\nmongoose-sequence@5.0.0\n"})}),"\n",(0,t.jsxs)(l.A,{groupId:"npm2yarn",children:[(0,t.jsx)(r.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save mongoose-sequence\n"})})}),(0,t.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add mongoose-sequence\n"})})}),(0,t.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add mongoose-sequence\n"})})}),(0,t.jsx)(r.A,{value:"bun",label:"Bun",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add mongoose-sequence\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["To use ",(0,t.jsx)(n.a,{href:"https://github.com/ramiel/mongoose-sequence",children:(0,t.jsx)(n.code,{children:"mongoose-sequence"})}),", import the plugin and use it like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import AutoIncrementFactory from 'mongoose-sequence';\n\n// AutoIncrement now is the instance\nconst AutoIncrement = AutoIncrementFactory(mongoose);\n\n@plugin(AutoIncrement, { inc_field: '_id', start_seq: 200 })\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id: number;\n}\n\n// The Plugin options can be applied too\n@plugin<mongoose.SequenceOptions>(AutoIncrement, { inc_field: '_id' }) // Note: \"start_seq\" is not in the \"SequenceOptions\" type\nclass SomeClass extends defaultClasses.Base<number> {\n  @prop()\n  public _id!: number;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details, see ",(0,t.jsx)(n.a,{href:"https://github.com/ramiel/mongoose-sequence/issues/83",children:"this issue"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"typegooseauto-increment",children:"@typegoose/auto-increment"}),"\n",(0,t.jsx)(n.p,{children:"Last updated for:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",children:"@typegoose/typegoose@12.12.0\n@typegoose/auto-increment@4.11.0\n"})}),"\n",(0,t.jsxs)(l.A,{groupId:"npm2yarn",children:[(0,t.jsx)(r.A,{value:"npm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save @typegoose/auto-increment\n"})})}),(0,t.jsx)(r.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"yarn add @typegoose/auto-increment\n"})})}),(0,t.jsx)(r.A,{value:"pnpm",label:"pnpm",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm add @typegoose/auto-increment\n"})})}),(0,t.jsx)(r.A,{value:"bun",label:"Bun",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"bun add @typegoose/auto-increment\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["The Typegoose project provides an ",(0,t.jsxs)(n.a,{href:"https://github.com/typegoose/auto-increment",children:[(0,t.jsx)(n.code,{children:"auto-increment"})," plugin"]})," for Mongoose. Here is how to use it:"]}),"\n",(0,t.jsx)(n.h3,{id:"autoincrementsimple",children:"AutoIncrementSimple"}),"\n",(0,t.jsx)(n.p,{children:"Always increments the field on each save"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@plugin(AutoIncrementSimple, [{ field: 'someIncrementedField' }])\nclass SomeClass {\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc = await SomeModel.create({ someIncrementedField: 10 });\n\nawait doc.save(); // someIncrementedField will be incremented here\nconsole.log(doc.someIncrementedField); // will print \"11\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"autoincrementid",children:"AutoIncrementID"}),"\n",(0,t.jsxs)(n.p,{children:["Only increases the field if the document is ",(0,t.jsx)(n.em,{children:"new"})," and the counter is stored in a counter-collection (default field: ",(0,t.jsx)(n.code,{children:"_id"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@plugin(AutoIncrementID, {})\nclass SomeClass {\n  @prop()\n  public _id: number;\n\n  @prop() // does not need to be empty\n  public someIncrementedField: number;\n}\n\nconst SomeModel = getModelForClass(SomeClass);\n\nconst doc1 = await SomeModel.create({ someIncrementedField: 10 }); // _id will be 1\nconst doc2 = await SomeModel.create({ someIncrementedField: 20 }); // _id will be 2\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Some or all of the listed plugins might not have a ",(0,t.jsx)(n.code,{children:"@types"})," package, so types have to be mostly manually declared."]})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);